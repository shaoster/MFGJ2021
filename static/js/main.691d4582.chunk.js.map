{"version":3,"sources":["component/Hand.tsx","component/SampleGrid.tsx","Game.ts","App.js","component/Board.tsx","reportWebVitals.js","index.js"],"names":["Hand","hand","onClickCard","undefined","remainingProps","Grid","container","map","cardName","handSlot","item","xs","Card","variant","className","CardContent","CardActions","Button","onClick","disabled","PartGrid","parts","currentlyPlayingStep","onClickStep","useState","tabIndex","setTabIndex","steps","truncatedSteps","take","GRID_WIDTH","chunkedGrid","chunk","AppBar","position","Tabs","value","onChange","_","newValue","p","Tab","label","sample","row","rowId","cell","colId","cellClass","stepId","Paper","keyMapper","bd","ch","sd","sampler","Tone","urls","e4","d4","c4","baseUrl","process","toDestination","SampleGrid","useEffect","bpm","start","stop","setCurrentlyPlayingStep","isPlaying","setIsPlaying","play","a","sequencer","time","part","triggerAttackRelease","range","STEP_COUNT","loop","FLIP","MyGame","setup","playerParts","targetParts","playerHand","currentCard","moves","playCard","G","ctx","card","events","setStage","stage","moveLimit","Error","turn","stages","chooseFlipTarget","chooseTarget","partId","splice","cancel","App","Client","game","board","activePlayers","numPlayers","debug","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.691d4582.chunk.js","sourcesContent":["import { Button, Card, CardActions, CardContent, Grid } from \"@material-ui/core\";\n\nexport default function Hand({\n  hand, onClickCard=undefined, ...remainingProps\n}: {hand: Array<string>, onClickCard: any} & React.HTMLAttributes<HTMLDivElement>)\n{\n  return <Grid container {...remainingProps}>\n    {\n    hand.map((cardName: string, handSlot: number) => (\n      <Grid item xs={1}>\n        <Card variant=\"outlined\" className=\"card\">\n          <CardContent>\n            <h2>{cardName}</h2>\n          </CardContent> \n          <CardActions>\n            <Button\n              variant=\"contained\"\n              onClick={()=>onClickCard(handSlot)}\n              disabled={!onClickCard}\n            >\n              Play\n            </Button>         \n          </CardActions>\n        </Card>\n      </Grid>\n    ))\n    }\n  </Grid>;\n};","import React, { useEffect, useState } from 'react';\n\nimport * as Tone from \"tone\";\n\nimport {\n  AppBar,\n  Button,\n  Paper,\n  Tab,\n  Tabs,\n} from '@material-ui/core';\n\nimport {\n  chunk,\n  range,\n  take,\n} from 'lodash';\n\nimport type {\n  Part,\n} from '../Game';\n\nexport const GRID_WIDTH: number = 4;\nexport const GRID_HEIGHT: number = 4;\nexport const STEP_COUNT: number = GRID_WIDTH * GRID_HEIGHT;\nexport const DEFAULT_BPM: number = 80;\n\nfunction PartGrid(\n  { parts, currentlyPlayingStep, onClickStep = undefined, ...remainingProps }: React.HTMLAttributes<HTMLTableElement> & {\n    parts: Array<Part>, currentlyPlayingStep: number | null, onClickStep: any,\n  }\n)\n{\n  const [tabIndex, setTabIndex] = useState(0);\n  const {\n    steps\n  } = parts[tabIndex];\n  const truncatedSteps: Array<boolean> = take(steps, GRID_WIDTH * GRID_WIDTH);\n  const chunkedGrid: Array<Array<boolean>> = chunk(truncatedSteps, 4);\n  return (\n    <table {...remainingProps}>\n      <caption>\n        <AppBar position=\"static\">\n          <Tabs value={tabIndex} onChange={(_, newValue: number) => setTabIndex(newValue)}>\n            {\n              parts.map((p: Part) => <Tab label={p.sample}/>)\n            }\n          </Tabs>\n      </AppBar>\n      </caption>\n      <tbody>\n      {\n        chunkedGrid.map((row: Array<boolean>, rowId: number) => (\n          <tr key={rowId} className=\"row\">\n          {\n            row.map((cell: boolean, colId: number) => {\n              let cellClass: string = \"cell \";\n              cellClass += (cell ? \"selected\": \"unselected\");\n              if (rowId * GRID_WIDTH + colId === currentlyPlayingStep) {\n                cellClass += \" playing\";\n              }\n              const stepId = rowId * GRID_WIDTH + colId;\n              return (\n                <td key={colId} className={cellClass}>\n                  <Paper className=\"step\" variant=\"outlined\" onClick={() => onClickStep && onClickStep(tabIndex, stepId)}/>\n                </td>\n              );\n            })\n          }\n          </tr>\n        ))\n      }\n      </tbody>\n    </table>\n  );\n}\nconst keyMapper: { [key: string]: string } = {\n  bd: \"e4\",\n  ch: \"d4\",\n  sd: \"c4\",\n};\n\nconst sampler = new Tone.Sampler({\n  urls: {\n    // Bass Drum\n    e4: \"BD/E808_BD[short]-03.wav\",\n    // Closed Hat\n    d4: \"CH/E808_CH-06.wav\",\n    // Snare\n    c4: \"SD/E808_SD-03.wav\",\n  },\n  baseUrl: process.env.PUBLIC_URL + \"/samples/808/\"\n}).toDestination();\n\nexport default function SampleGrid(\n  { parts, onClickStep = undefined, ...remainingProps }: React.HTMLAttributes<HTMLTableElement> & { parts: Array<Part>, onClickStep?: any }\n) {\n  useEffect(() => {\n    Tone.Transport.bpm.value = DEFAULT_BPM;\n    Tone.Transport.start();\n    return () => {\n      Tone.Transport.stop();\n    }\n  }, []);\n  const [currentlyPlayingStep, setCurrentlyPlayingStep] = useState<number | null>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const play = async () => {\n    const sequencer = new Tone.Sequence(\n      (time, stepId: number) => {\n        if (stepId >= STEP_COUNT) {\n          // Dummy fence-post.\n          setCurrentlyPlayingStep(null);\n          setIsPlaying(false);\n          return;\n        }\n        setCurrentlyPlayingStep(stepId);\n        for (let part of parts) {\n          if (part.steps[stepId]) {\n            sampler.triggerAttackRelease(keyMapper[part.sample], \"16n\", time);\n          }\n        }\n      },\n      range(STEP_COUNT + 1),\n      \"16n\"\n    );\n    setIsPlaying(true);\n    sequencer.loop = false;\n    sequencer.start();\n  };\n  return <>\n    <PartGrid\n      parts={parts}\n      onClickStep={onClickStep}\n      currentlyPlayingStep={currentlyPlayingStep}\n      {...remainingProps}\n    />\n  <Button variant=\"contained\" onClick={play} disabled={isPlaying}>{ isPlaying ? \"Playing\" : \"Play\" }</Button>\n  </>\n};","import { Ctx, Game } from 'boardgame.io';\n\nexport interface Part {\n  sample: string;\n  steps: Array<boolean>;\n};\n\nexport interface GameState {\n  playerParts: Array<Part>;\n  targetParts: Array<Part>;\n  playerHand: Array<string>;\n  currentCard: number;\n}\n\nexport const FLIP:string = \"flip\";\n\nexport const MyGame: Game = {\n  setup: () => ({\n    playerParts: [\n      {\n        sample: \"sd\",\n        steps: [\n          false, false, false, false,\n          true, false, false, false,\n          false, false, false, false,\n          true, false, false, false,\n        ],\n      },\n      {\n        sample: \"bd\",\n        steps: [\n          true, false, false, false,\n          false, false, false, false,\n          true, false, false, false,\n          false, false, false, false,\n        ],\n      },\n      {\n        sample: \"ch\",\n        steps: [\n          true, false, true, false,\n          true, false, true, false,\n          true, false, true, false,\n          true, false, true, false,\n        ],\n      },\n    ],\n    targetParts: [\n      {\n        sample: \"sd\",\n        steps: [\n          false, false, false, false,\n          true, false, false, false,\n          false, false, false, false,\n          true, false, false, false,\n        ],\n      },\n      {\n        sample: \"bd\",\n        steps: [\n          true, false, false, false,\n          false, false, false, false,\n          true, false, false, false,\n          false, false, false, false,\n        ],\n      },\n      {\n        sample: \"ch\",\n        steps: [\n          true, false, true, false,\n          true, false, true, false,\n          true, false, true, false,\n          true, false, true, true,\n        ],\n      },\n    ],\n    playerHand: [\n     FLIP,\n     FLIP,\n     FLIP,\n     FLIP, \n    ],\n    currentCard: null,\n  }),\n  moves: {\n    playCard: (G, ctx: Ctx, handSlot) => {\n      const card = G.playerHand[handSlot];\n      switch (card) {\n        case FLIP: {\n          G.currentCard = handSlot;\n          ctx.events?.setStage?.({ stage: 'chooseFlipTarget', moveLimit: 1 });\n        } break;\n        default: {\n          throw Error(`Unrecognized card: ${card}`);\n        }\n      }\n    },\n  },\n  turn: {\n    stages: {\n      chooseFlipTarget: {\n        moves: {\n          chooseTarget: (G, ctx, partId, stepId) => {\n            // TODO: More abstraction...\n            G.playerParts[partId].steps[stepId] = !G.playerParts[partId].steps[stepId];\n            G.playerHand.splice(G.currentCard, 1);\n            G.currentCard = null;\n          },\n          cancel: (G, ctx) => {\n            // Burn the move.\n            G.currentCard = null;\n          }\n        },\n      },\n    }\n  }\n};","import './App.css';\nimport { Client } from 'boardgame.io/react';\nimport Board from './component/Board';\nimport { MyGame } from './Game';\n\nconst App = Client({ game: MyGame, board: Board, numPlayers: 1, debug: true});\n\nexport default App;\n","import {\n  BoardProps \n} from 'boardgame.io/react'\n\nimport {\n  Grid,\n} from '@material-ui/core';\n\nimport Hand from './Hand';\nimport SampleGrid from './SampleGrid';\n\nimport type { GameState } from '../Game';\n\nexport default function Board({G, ctx, moves}: BoardProps<GameState>) {\n  const {\n    playerParts,\n    targetParts,\n  } = G;\n  // TODO: Make more abstract.\n  const onClickStep = moves.chooseTarget ?? undefined;\n  return <Grid container>\n    <Grid item xs={3}>\n      <h1>Current</h1>\n      <SampleGrid\n        parts={playerParts}\n        className=\"sampler player\"\n        onClickStep={onClickStep}\n      />\n    </Grid>\n    <Grid item xs={3}>\n      <h1>Goal</h1>\n      <SampleGrid\n        parts={targetParts}\n        className=\"sampler goal\"\n      />\n    </Grid>\n    <Grid item xs={6}/>\n    <Grid item xs={12}>\n      <h1>Hand</h1>\n      <Hand\n        hand={G.playerHand}\n        onClickCard={ctx.activePlayers === null ? moves.playCard : undefined}\n        className=\"hand\"\n      />\n    </Grid>\n  </Grid>;\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}