{"version":3,"sources":["Types.ts","Constants.ts","Cards.ts","component/SampleGrid.tsx","component/CardSequence.tsx","Puzzles.ts","component/LevelDescription.tsx","component/TrackProgress.tsx","component/Board.tsx","Game.ts","App.js","reportWebVitals.js","index.js"],"names":["StepState","StepAction","STEP_COUNT","GRID_WIDTH","SECONDS_PER_STEP","ApplyPatternToPart","pattern","part","updatedSteps","steps","entries","stepIndex","stepAction","currentStep","INCREMENT","OFF","ON","ACCENT","DECREMENT","MAX","ZERO","SHIFT_UP","SHIFT_RIGHT","SHIFT_DOWN","SHIFT_LEFT","processStep","CardImpl","flavor","title","description","image","sampleTarget","this","G","playerParts","sample","Cards","makeBed","IGNORE","cleanChest","layFlat","fold","putAway","drop","mop","sweep","vacuum","emptyTrash","feast","rearrange","bus","rinse","scour","dry","laundry","floor","dishes","PatternRows","classSequence","chunkedGrid","chunk","map","row","rowId","className","cellClass","colId","Paper","variant","PartGrid","parts","currentlyPlayingStep","tabIndex","setTabIndex","remainingProps","cellClasses","take","step","index","key","Tabs","value","onChange","_","newValue","p","Tab","label","style","minWidth","SampleGrid","ActionCard","cardId","cardIndex","buttonLabel","onClickCard","onClickEnabled","viewCard","isSelected","emphasizeButton","leftOffset","card","maybeClassSequence","Card","onClick","marginLeft","CardContent","CardActions","Button","evt","stopPropagation","disabled","CardInteractionReducer","lastState","action","type","renderedCardCount","newCard","selectedCard","cardCount","newClasses","range","i","computeClass","cardClasses","Error","CardSequence","cards","unremovable","defaultCardClasses","useReducer","length","sequenceState","dispatch","useEffect","TransitionGroup","component","CSSTransition","enter","exit","classNames","timeout","onEnter","onExited","zIndex","LT_PREFIX","process","Puzzles","levelTrack","targetParts","startingHand","startingSchedule","hints","overrideTrackBars","overrideBPM","TurnDescription","turn","onDismiss","useState","lastAcknowledgedTurn","setLastAcknowledgedTurn","show","setShow","onClose","puzzle","Modal","open","descriptionLine","TrackProgress","progress","max","LinearProgress","ContinueButton","enabled","hasClearedLevel","keyMapper","cy","pitch","duration","bd","ch","sd","sampler","Tone","urls","f4","e4","d4","c4","baseUrl","toDestination","SetupTurn","oldG","Array","from","newG","playerHand","playerSchedule","forEach","playCard","CheckLevelComplete","targetPartIndex","targetPart","currentPart","MyGame","moves","ctx","handSlot","INVALID_MOVE","splice","unshift","removeCard","playerScheduleSlot","removedCardId","cleanState","inOrderStack","reverse","console","log","replayedCardIndex","replayedCardId","clearSchedule","commitSchedule","events","endTurn","onBegin","App","Client","game","board","trackBars","bpm","start","stop","npcDialog","setNpcDialog","selectedPart","setSelectedPart","lastCard","partOfLastCard","findIndex","e","setCurrentlyPlayingStep","lastPlayedStep","setLastPlayedStep","undefined","currentTime","setCurrentTime","isPlaying","setIsPlaying","playerActive","setPlayerActive","player","setPlayer","sequence","setSequence","onStep","time","stepId","play","sequencer","loop","autostart","useCallback","triggerAttackRelease","Grid","container","alignItems","justify","item","xs","toFixed","SwitchTransition","children","join","onViewCard","numPlayers","debug","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d7fd914f.chunk.js","sourcesContent":["/**\n * This represents the top-level data model of the game.\n * Any concept of global consequence should be declared (but not implemented) here.\n * Because the compiler can traverse the dependency graph just fine, the order of declaration\n * should be for human consumption.\n * Thus, top level concepts are presented first, and their dependencies are declared later.\n */\n\n\n////////////////////////////////\n// Puzzle Configuration\n\nexport interface Puzzle {\n  title: string;\n  description: Array<string>;\n  levelTrack: string;\n  // Override the usually constant length of the track.\n  overrideTrackBars?: number;\n  // Override the usually constant bpm.\n  overrideBPM?: number;\n  // The musical composition the player is aiming to replicate.\n  targetParts: Array<Part>;\n  // The cards you start with in your hand.\n  startingHand: Array<CardId>;\n  // Any initial state that cannot be removed.\n  startingSchedule: Array<CardId>;\n  // Any dialog prior to cards being scheduled.\n  hints?: Array<string>;\n}\n\nexport interface Part {\n  sample: string;\n  steps: StepSequence;\n};\n\nexport type StepSequence = Array<StepState>;\n\nexport enum StepState {\n  OFF = 0,\n  ON = 1,\n  ACCENT = 2,\n};\n\n//////////////////////////////////////////////////////////\n// Gameplay State (i.e. when trying to solve the puzzle)\n\n// Keep this serializable for easy state management.\nexport interface GameState extends Puzzle {\n  // The player's current parts.\n  playerParts: Array<Part>;\n  // The player's current hand.\n  playerHand: Array<CardId>;\n  // The player's current schedule.\n  playerSchedule: Array<CardId>;\n  // Whether the player has unlocked the next level.\n  hasClearedLevel: boolean;\n}\n\n// The card identifier is just a string for now. This keeps things serializable.\nexport type CardId = string;\n\n//////////////////////////////////////////////////////////\n// Card Concepts\n\nexport interface CardFlavor {\n  title: string;\n  description: string;\n  image?: string;\n};\n\nexport interface Card extends CardFlavor {\n  // Pattern cards have special UI considerations.\n  sampleTarget?: string;\n  pattern?: Pattern;\n  playCard: CardAction;\n};\n\nexport type Pattern = Array<StepAction>;\n\nexport enum StepAction {\n  INCREMENT,\n  DECREMENT,\n  ZERO,\n  MAX,\n  SHIFT_UP,\n  SHIFT_RIGHT,\n  SHIFT_DOWN,\n  SHIFT_LEFT,\n  IGNORE,\n};\n\nexport type CardAction = (G: GameState) => void;","export const GRID_WIDTH: number = 4;\nexport const GRID_HEIGHT: number = 4;\nexport const STEP_COUNT: number = GRID_WIDTH * GRID_HEIGHT;\nexport const DEFAULT_BPM: number = 88;\nexport const DEFAULT_TRACK_BARS: number = 4;\nexport const MAX_HAND_SIZE: number = 6;\nexport const SECONDS_PER_STEP: number = 60.0 / (GRID_WIDTH * DEFAULT_BPM);","import { GRID_WIDTH, STEP_COUNT } from \"./Constants\";\nimport { Card, CardFlavor, GameState, Part, Pattern, StepAction, StepState } from \"./Types\";\n\n// Separate from CardImpl, for UI/preview purposes.\nexport const ApplyPatternToPart: (pattern: Pattern, part: Part) => void = (pattern, part) => {\n  const updatedSteps = [...part.steps];\n  for (const [stepIndex, stepAction] of pattern.entries()) {\n    const processStep: () => StepState = () => {\n      const currentStep = part.steps[stepIndex];\n      switch (stepAction) {\n        case StepAction.INCREMENT:\n          if (currentStep === StepState.OFF) {\n            return StepState.ON;\n          } else {\n            return StepState.ACCENT;\n          }\n        case StepAction.DECREMENT:\n          if (currentStep === StepState.ACCENT) {\n            return StepState.ON;\n          } else {\n            return StepState.OFF;\n          }\n        case StepAction.MAX:\n          return StepState.ACCENT;\n        case StepAction.ZERO:\n          return StepState.OFF;\n        case StepAction.SHIFT_UP:\n          if (stepIndex + GRID_WIDTH > STEP_COUNT) {\n            return StepState.OFF\n          }\n          return part.steps[stepIndex + GRID_WIDTH];\n        case StepAction.SHIFT_RIGHT:\n          if ((stepIndex % GRID_WIDTH) === 0) {\n            return StepState.OFF;\n          }\n          return part.steps[stepIndex - 1];\n        case StepAction.SHIFT_DOWN:\n          if (stepIndex - GRID_WIDTH < 0) {\n            return StepState.OFF;\n          }\n          return part.steps[stepIndex - GRID_WIDTH];\n        case StepAction.SHIFT_LEFT:\n          if ((stepIndex % GRID_WIDTH) + 1 === GRID_WIDTH) {\n            return StepState.OFF;\n          }\n          return part.steps[stepIndex + 1];\n        default:\n          return currentStep;\n      }\n    }\n    updatedSteps[stepIndex] = processStep();\n  }\n  part.steps = updatedSteps;\n}\n\nclass CardImpl implements Card {\n  title: string;\n  description: string;\n  image?: string;\n  sampleTarget?: string;\n  pattern?: Pattern;\n\n  constructor(flavor: CardFlavor, pattern?: Pattern, part?: string) {\n    this.title = flavor.title;\n    this.description = flavor.description;\n    this.image = flavor.image;\n    this.pattern = pattern;\n    this.sampleTarget = part;\n  }\n\n  playCard(G: GameState) {\n    for (const part of G.playerParts) {\n      if (part.sample !== this.sampleTarget) {\n        continue;\n      }\n      if (this.pattern) {\n        ApplyPatternToPart(this.pattern, part);\n      }\n    }\n  }\n}\n\nconst Cards : {[key: string]: Card} = {\n  makeBed: new CardImpl(\n    {\n      title: \"Make Bed\",\n      description: \"If you make your bed every morning, you will have accomplished the first task of the day.\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"bd\"\n  ),\n  cleanChest: new CardImpl(\n    {\n      title: \"Clean Chest\",\n      description: \"Next to the bed is a small chest for your personal belongings. It's a bit dusty.\"\n    },\n    [\n      StepAction.DECREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"bd\"\n  ),\n  layFlat: new CardImpl(\n    {\n      title: \"Lay Flat\",\n      description: \"Lay your shirt flat on your bed. The foundation of any laundry folding routine.\"\n    },\n    [\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"sd\"\n  ),\n  fold: new CardImpl(\n    {\n      title: \"Fold\",\n      description: \"Fold your shirt. Add some complexity! (Assuming you have something to start with...)\"\n    },\n    [\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"sd\"\n  ),\n  putAway: new CardImpl(\n    {\n      title: \"Put Away\",\n      description: \"Put away your freshly folded clothes.\"\n    },\n    [\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.MAX, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"sd\"\n  ),\n  drop: new CardImpl(\n    {\n      title: \"The Mess\",\n      description: \"Oops! You dropped your [?] all over the floor. What a mess...\"\n    },\n    [\n      StepAction.MAX, StepAction.MAX, StepAction.MAX, StepAction.MAX,\n      StepAction.MAX, StepAction.MAX, StepAction.MAX, StepAction.MAX,\n      StepAction.MAX, StepAction.MAX, StepAction.MAX, StepAction.MAX,\n      StepAction.MAX, StepAction.MAX, StepAction.MAX, StepAction.MAX,\n    ],\n    \"bd\"\n  ),\n  mop: new CardImpl(\n    {\n      title: \"Mop\",\n      description: \"Mop the floor. This mess might be a bit too much to soak up though.\"\n    },\n    [\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT, StepAction.DECREMENT,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT, StepAction.DECREMENT,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT, StepAction.DECREMENT,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT, StepAction.DECREMENT,\n    ],\n    \"bd\"\n  ),\n  sweep: new CardImpl(\n    {\n      title: \"Sweep\",\n      description: \"Sweep the floor. It's a bit hard to get the corners though..\"\n    },\n    [\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT, StepAction.DECREMENT,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT, StepAction.DECREMENT,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT, StepAction.IGNORE,\n    ],\n    \"bd\"\n  ),\n  vacuum: new CardImpl(\n    {\n      title: \"Vacuum\",\n      description: \"Suck up whatever is left.\"\n    },\n    [\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT,\n    ],\n    \"bd\"\n  ),\n  emptyTrash: new CardImpl(\n    {\n      title: \"Empty Trash\",\n      description: \"Those bins were chalk full of [???]! Much better now...\"\n    },\n    [\n      StepAction.IGNORE, StepAction.ZERO, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.ZERO, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.ZERO, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.ZERO, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"bd\"\n  ),\n  feast: new CardImpl(\n    {\n      title: \"Feast\",\n      description: \"What a delicious meal! What are we going to do about all the dishes?\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.INCREMENT, StepAction.IGNORE, StepAction.MAX,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.MAX, StepAction.IGNORE, StepAction.MAX, StepAction.MAX,\n    ],\n    \"ch\"\n  ),\n  rearrange: new CardImpl(\n    {\n      title: \"Rearrange\",\n      description: \"All the chairs and tables have been moved away from their original places!\"\n    },\n    [\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_UP, StepAction.SHIFT_LEFT, StepAction.SHIFT_UP,\n      StepAction.SHIFT_DOWN, StepAction.SHIFT_UP, StepAction.SHIFT_DOWN, StepAction.SHIFT_UP,\n      StepAction.SHIFT_DOWN, StepAction.SHIFT_UP, StepAction.SHIFT_DOWN, StepAction.SHIFT_UP,\n      StepAction.SHIFT_DOWN, StepAction.SHIFT_RIGHT, StepAction.SHIFT_DOWN, StepAction.SHIFT_RIGHT,\n    ],\n    \"ch\"\n\n  ),\n  bus: new CardImpl(\n    {\n      title: \"Bus\",\n      description: \"What a delicious meal! What are we going to do about all the dishes?\"\n    },\n    [\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_LEFT, StepAction.SHIFT_LEFT, StepAction.SHIFT_UP,\n      StepAction.SHIFT_DOWN, StepAction.IGNORE, StepAction.IGNORE, StepAction.SHIFT_UP,\n      StepAction.SHIFT_DOWN, StepAction.IGNORE, StepAction.IGNORE, StepAction.SHIFT_UP,\n      StepAction.SHIFT_DOWN, StepAction.SHIFT_RIGHT, StepAction.SHIFT_RIGHT, StepAction.SHIFT_RIGHT,\n    ],\n    \"ch\"\n  ),\n  rinse: new CardImpl(\n    {\n      title: \"Rinse\",\n      description: \"Rinse the dishes. This will make them easier to clean.\"\n    },\n    [\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_UP, StepAction.SHIFT_LEFT, StepAction.SHIFT_UP,\n      StepAction.SHIFT_DOWN, StepAction.SHIFT_RIGHT, StepAction.SHIFT_DOWN, StepAction.SHIFT_RIGHT,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"ch\"\n  ),\n  scour: new CardImpl(\n    {\n      title: \"Scour\",\n      description: \"Scour the dishes. Really put your back into it.\"\n    },\n    [\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_RIGHT, StepAction.SHIFT_LEFT, StepAction.SHIFT_RIGHT,\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_UP, StepAction.SHIFT_UP, StepAction.SHIFT_RIGHT,\n      StepAction.SHIFT_DOWN, StepAction.SHIFT_RIGHT, StepAction.SHIFT_LEFT, StepAction.SHIFT_DOWN,\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_RIGHT, StepAction.SHIFT_LEFT, StepAction.SHIFT_RIGHT,\n    ],\n    \"ch\"\n  ),\n  dry: new CardImpl(\n    {\n      title: \"Dry\",\n      description: \"Let the dishes dry. What a lovely sight!\"\n    },\n    [\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_RIGHT, StepAction.SHIFT_LEFT, StepAction.SHIFT_RIGHT,\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_RIGHT, StepAction.SHIFT_LEFT, StepAction.SHIFT_RIGHT,\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_RIGHT, StepAction.SHIFT_LEFT, StepAction.SHIFT_RIGHT,\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_RIGHT, StepAction.SHIFT_LEFT, StepAction.SHIFT_RIGHT,\n\n    ],\n    \"ch\"\n  ),\n  laundry: new CardImpl(\n    {\n      title: \"Laundry\",\n      description: \"Do the laundry. You know how!\"\n    },\n    [\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.MAX, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.MAX, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"sd\"\n  ),\n  floor: new CardImpl(\n    {\n      title: \"Floor\",\n      description: \"Clean the floor. You know how!\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"bd\"\n  ),\n  dishes: new CardImpl(\n    {\n      title: \"Dishes\",\n      description: \"Do the dishes. You know how!\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.MAX, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.MAX, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.MAX, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.MAX, StepAction.IGNORE,\n    ],\n    \"ch\"\n  )\n};\n\nexport default Cards;","import React from 'react';\n\nimport {\n  Paper,\n  Tab,\n  Tabs,\n} from '@material-ui/core';\n\nimport {\n  chunk,\n  take,\n} from 'lodash';\n\nimport {\n  GRID_WIDTH,\n  STEP_COUNT,\n} from '../Constants';\nimport { Part, StepSequence, StepState } from '../Types';\n\nexport function PatternRows(\n  { classSequence, ...remainingProps } : React.HTMLAttributes<HTMLElement> & {\n    classSequence: Array<string>,\n  }\n) {\n  const chunkedGrid: Array<Array<string>> = chunk(classSequence, GRID_WIDTH);\n  return <>\n    {\n    chunkedGrid.map((row: Array<string>, rowId: number) => (\n      <tr key={\"row \" + rowId} className=\"row\">\n      {\n        row.map((cellClass: string, colId: number) => {\n          return (\n            <td key={\"col \" + colId} className={cellClass}>\n              <Paper className=\"step\" variant=\"outlined\"/>\n            </td>\n          );\n        })\n      }\n      </tr>\n    ))\n    }\n  </>;\n};\n\nfunction PartGrid(\n  { parts, currentlyPlayingStep, tabIndex, setTabIndex, ...remainingProps }: React.HTMLAttributes<HTMLElement> & {\n    parts: Array<Part>, currentlyPlayingStep: number | null, tabIndex: number, setTabIndex: any\n  }\n)\n{\n  const {\n    steps,\n    sample,\n  } = parts[tabIndex];\n  const truncatedSteps: StepSequence = take(steps, STEP_COUNT);\n  const cellClasses: Array<string> = truncatedSteps.map((step: StepState, index: number) => {\n    let cellClass = \"cell \";\n    cellClass += StepState[step] as string + \" \";\n    if (currentlyPlayingStep !== null && index === currentlyPlayingStep % STEP_COUNT) {\n      cellClass += \"playing\";\n    }\n    return cellClass;\n  });\n\n  return (\n    <table {...remainingProps} key={tabIndex}>\n      <caption>\n        <Tabs\n          variant=\"fullWidth\"\n          value={tabIndex}\n          onChange={(_, newValue: number) => setTabIndex(newValue)}\n          className=\"part-selector\"\n        >\n          {\n            parts.map((p: Part, index: number) =>\n              <Tab\n                key={\"tab \" + index}\n                label={p.sample}\n                style={{ minWidth: 48 }}\n              />\n            )\n          }\n        </Tabs>\n      </caption>\n      <tbody className={sample}>\n        <PatternRows\n          classSequence={cellClasses}\n        />\n      </tbody>\n    </table>\n  );\n}\n\nexport default function SampleGrid(\n  { parts, currentlyPlayingStep, tabIndex, setTabIndex, ...remainingProps }: React.HTMLAttributes<HTMLElement> & {\n    parts: Array<Part>, currentlyPlayingStep: number | null, tabIndex: number, setTabIndex: any\n  }\n) {\n  return <>\n    <PartGrid\n      parts={parts}\n      tabIndex={tabIndex}\n      setTabIndex={setTabIndex}\n      currentlyPlayingStep={currentlyPlayingStep}\n      {...remainingProps}\n    />\n  </>\n};","import { Button, Card, CardActions, CardContent } from \"@material-ui/core\";\nimport { range } from \"lodash\";\nimport { ReactElement, useEffect, useReducer } from \"react\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\nimport Cards from '../Cards';\nimport { MAX_HAND_SIZE } from \"../Constants\";\nimport { CardId, StepAction } from \"../Types\";\nimport { PatternRows } from \"./SampleGrid\";\n\nexport function ActionCard({\n  cardId, cardIndex, buttonLabel, onClickCard, onClickEnabled, viewCard, isSelected, emphasizeButton,\n  leftOffset\n}: {\n  cardId: CardId, cardIndex: number, buttonLabel: string, onClickCard: any,\n  onClickEnabled: boolean, viewCard: any, isSelected: boolean, emphasizeButton: boolean,\n  leftOffset: number\n} & React.HTMLAttributes<HTMLDivElement>) : ReactElement\n{\n  const card = Cards[cardId];\n  const maybeClassSequence = card.pattern?.map(\n    (stepAction: StepAction) => \"cell \" + StepAction[stepAction] as string\n  );\n  return <Card\n    variant=\"outlined\"\n    className={\"card \" + card.sampleTarget + (isSelected ? \" selected\" : \"\")}\n    onClick={viewCard}\n    style={{\n      marginLeft: leftOffset + \"px\"\n    }}\n  >\n    <CardContent>\n      {maybeClassSequence && \n        <table className=\"pattern\">\n          <tbody>\n            <PatternRows\n              classSequence={maybeClassSequence}\n            />\n          </tbody>\n        </table>\n      }\n    </CardContent> \n    <CardActions>\n      {onClickEnabled ? \n        <Button\n          variant=\"contained\"\n          onClick={(evt) => {\n            onClickCard(cardIndex);\n            evt.stopPropagation();\n          }}\n          disabled={!isSelected}\n          className={emphasizeButton ? \"emphasis\" : \"\"}\n        >\n          {buttonLabel}\n        </Button>         \n        :\n        <div className=\"card-fixed\">\n          FIXED\n        </div>\n      }\n    </CardActions>\n  </Card>;\n};\n\nexport function EmptyCardSlot(): ReactElement {\n  return <Card variant=\"outlined\" className=\"card empty\">\n    <CardContent>\n      &nbsp;\n    </CardContent> \n  </Card>\n}\n\ninterface CardInteraction {\n  type: string;\n  value?: any;\n};\n\ninterface SequenceState {\n  selectedCard: number;\n  cardClasses: Array<any>;\n  cardCount: number;\n  renderedCardCount: number; \n};\n\nconst CardInteractionReducer: (lastState: SequenceState, action: CardInteraction) => SequenceState =\n  (lastState: SequenceState, action: CardInteraction) => {\n    switch (action.type) {\n      // These two transitions are purely for tracking transient animation states.\n      case 'enter':\n        return {\n          ...lastState,\n          renderedCardCount: lastState.renderedCardCount + 1,\n        };\n      case 'exited':\n        return {\n          ...lastState,\n          renderedCardCount: lastState.renderedCardCount - 1,\n        };\n      // This is the race-safe implementation for how to handle card selections.\n      case 'select-card': {\n        const newCard = action.value !== lastState.selectedCard ? action.value : (\n          action.value < lastState.cardCount - 1 ? \n            action.value + 1 : 0 \n        );\n        const computeClass: (i: number) => string = (i) => {\n          if (i < newCard) {\n            return \"displace\";\n          } else {\n            return \"show\";\n          }\n        };\n        const newClasses = range(MAX_HAND_SIZE).map((i) => \"card-\" + computeClass(i));\n        return {\n          ...lastState,\n          cardClasses: newClasses,\n          selectedCard: newCard,\n        }\n      }\n      case 'reset': {\n        return {\n          ...action.value,\n          // Preserve the rendered card count?\n          renderedCardCount: lastState.renderedCardCount\n        };\n      }\n      default:\n        throw new Error(\"Unrecognized action.\");\n    }\n};\n\nexport default function CardSequence({\n  cards, buttonLabel, onClickCard, unremovable, className, emphasizeButton, ...remainingProps\n}: {\n  cards: Array<CardId>, buttonLabel: string, onClickCard: any, unremovable: number, emphasizeButton: boolean\n} & React.HTMLAttributes<HTMLDivElement>) {\n  const defaultCardClasses = range(MAX_HAND_SIZE).map(() => 'card-show');\n  const [sequenceState, dispatch] = useReducer(CardInteractionReducer, {\n    cardCount: cards.length,\n    selectedCard: 0,\n    cardClasses: defaultCardClasses,\n    renderedCardCount: cards.length,\n  });\n  // Sometimes we have an inbound update to cards that we need to reconcile with our controlled\n  // sequence state... Just reset.\n  useEffect(() => {\n    if (cards.length !== sequenceState.cardCount) {\n      dispatch({\n        type: \"reset\",\n        value: {\n          cardCount: cards.length,\n          selectedCard: 0,\n          cardClasses: defaultCardClasses,\n        }\n      })\n    }\n  }, [cards.length, defaultCardClasses, sequenceState.cardCount])\n  return <div className={\"sequence \" + className}>\n    <TransitionGroup component={null}>\n    {\n    cards.map((cardId: CardId, index: number) => \n      <CSSTransition\n        key={cardId}\n        enter={true}\n        exit={true}\n        classNames=\"card\"\n        timeout={200}\n        onEnter={() => dispatch({type: 'enter', value: cards.length})}\n        onExited={() => dispatch({type: 'exited', value: cards.length})}\n      >\n        <div\n          className={\"card-slot \" + sequenceState.cardClasses[index]}\n          style={{\n            zIndex: MAX_HAND_SIZE - index,\n          }}\n        >\n          <ActionCard\n            cardId={cardId}\n            cardIndex={index}\n            buttonLabel={buttonLabel}\n            onClickCard={() => onClickCard(index)}\n            onClickEnabled={cards.length - index > unremovable}\n            viewCard={() => {\n              dispatch({\n                type: \"select-card\",\n                value: index,\n              });\n            }}\n            isSelected={index === sequenceState.selectedCard}\n            emphasizeButton={emphasizeButton}\n            leftOffset={18 * (MAX_HAND_SIZE - sequenceState.renderedCardCount - 1)}\n          />\n          { cards.length - index > unremovable &&\n            <div className=\"card-order\" onClick={() => dispatch({type: \"select-card\", value: index,})}>\n              {cards.length - index - unremovable}\n            </div> \n          }\n        </div>\n      </CSSTransition>\n    )\n    }\n    </TransitionGroup>\n  </div>;\n};","import { Puzzle, StepState } from \"./Types\";\n\nconst LT_PREFIX = process.env.PUBLIC_URL + \"/samples/levels/\";\nconst Puzzles: Array<Puzzle> = [\n\n  // 0\n  /*\n  {\n    title: \"The Dojo\",\n    description: [\n      \"Hello, Neon...\",\n      \"We have been eagerly awaiting your arrival at the <???> Dojo.\",\n      \"I am <???>, and I have been tasked with guiding you to your living quarters.\",\n      \"Your training shall begin shortly, but why don't you first get settled in?\"\n    ],\n    levelTrack: `${LT_PREFIX}unmixed_1_1_88_bpm.ogg`,\n    targetParts: [\n      {\n        sample: \"ch\",\n        steps: [\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ACCENT, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n        ]\n      }\n    ],\n    startingHand: [\n      \"makeBed\",\n      \"cleanChest\",\n    ],\n    startingSchedule: [],\n  },\n  */\n  {\n    title: \"The Laundry\",\n    description: [\n      \"Hey Neon, are you settled in yet?\",\n      \"I'm [???] and I'm a specialist in [???].\",\n      \"Your training starts today.\"\n    ],\n    levelTrack: `${LT_PREFIX}unmixed_1_1_88_bpm.ogg`,\n    targetParts: [\n      {\n        sample: \"sd\",\n        steps: [\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ACCENT, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ACCENT, StepState.OFF, StepState.OFF, StepState.OFF,\n        ],\n      },\n    ],\n    startingHand: [\n      \"layFlat\",\n      \"fold\",\n      \"putAway\"\n    ],\n    startingSchedule: [],\n    hints: [\n      \"Why don't we get started by doing the laundry?\",\n      \"**PLACE** items from your **To-Do** list on your **Schedule** and get to work!\",\n    ],\n  },\n  // 1\n  {\n    title: \"The Floor\",\n    description: [\n      \"Nice work on that laundry!\",\n      \"Let me introduce you to [???].\",\n      \"We're only just getting started...\",\n    ],\n    levelTrack: `${LT_PREFIX}unmixed_1_2_88_bpm.ogg`,\n    targetParts: [\n      {\n        sample: \"bd\",\n        steps: [\n          StepState.ACCENT, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ACCENT, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ACCENT, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ACCENT, StepState.OFF, StepState.OFF, StepState.OFF,\n        ],\n      },\n    ],\n    startingHand:  [\n      \"mop\",\n      \"sweep\",\n      \"vacuum\",\n      \"emptyTrash\",\n    ],\n    startingSchedule: [\n      \"drop\",\n    ],\n    hints: [\n      \"That's a big mess to tidy up!\",\n      \"Just like with music, sometimes what's missing is heard loudest.\"\n    ],\n  },\n  // 2\n  {\n    title: \"After Dinner\",\n    description: [\n      \"Everything's right back in its place.\",\n      \"You can head to the mess hall now.\",\n      \"[???] will serve you your dinner.\"\n    ],\n    levelTrack: `${LT_PREFIX}unmixed_1_3_88_bpm.ogg`,\n    targetParts: [\n      {\n        sample: \"ch\",\n        steps: [\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n        ],\n      },\n    ],\n    startingHand: [\n      \"rearrange\",\n      \"bus\",\n      \"rinse\",\n      \"scour\",\n      \"dry\",\n    ],\n    startingSchedule: [\n      \"feast\",\n    ],\n    hints: [\n      \"You've been working hard! You've arrived just in time for dinner.\",\n      \"Err.. Or rather, just in time for cleaning the tables and dishes from dinner...\",\n    ],\n  },\n  // 3\n  {\n    title: \"Putting it All Together\",\n    description: [\n      \"Wow, all the tables and dishes look great!\",\n      \"You've worked hard.\",\n      \"It's time to meet the master...\"\n    ],\n    levelTrack: `${LT_PREFIX}unmixed_1_all_88_bpm.ogg`,\n    overrideTrackBars: 12,\n    targetParts: [\n      {\n        sample: \"sd\",\n        steps: [\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ACCENT, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ACCENT, StepState.OFF, StepState.OFF, StepState.OFF,\n        ],\n      },\n      {\n        sample: \"bd\",\n        steps: [\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n        ],\n      },\n      {\n        sample: \"ch\",\n        steps: [\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n        ],\n      },\n    ],\n    startingHand: [\n      \"laundry\",\n      \"floor\",\n      \"dishes\",\n    ],\n    startingSchedule: [],\n    hints: [\n      \"Show me what you've done today!\"\n    ]\n  },\n  {\n    title: \"Day 2\",\n    description: [\n      \"After the tutorial.\",\n    ],\n    levelTrack: `${LT_PREFIX}unmixed_2_1_112_bpm.ogg`,\n    overrideBPM: 112,\n    targetParts: [\n      {\n        sample: \"bd\",\n        steps: [\n          StepState.ON, StepState.ON, StepState.OFF, StepState.OFF,\n          StepState.OFF, StepState.ON, StepState.OFF, StepState.ON,\n          StepState.OFF, StepState.ON, StepState.OFF, StepState.ON,\n          StepState.OFF, StepState.OFF, StepState.ON, StepState.OFF,\n        ],\n      },\n      {\n        sample: \"sd\",\n        steps: [\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ACCENT, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n        ],\n      },\n      {\n        sample: \"ch\",\n        steps: [\n          StepState.ACCENT, StepState.ACCENT, StepState.ACCENT, StepState.ACCENT,\n          StepState.OFF, StepState.ACCENT, StepState.ON, StepState.ON,\n          StepState.ACCENT, StepState.ON, StepState.ON, StepState.ON,\n          StepState.OFF, StepState.ON, StepState.ACCENT, StepState.ON,\n        ],\n      },\n    ],\n    startingHand: [\n    ],\n    startingSchedule: [\n    ],\n    hints: [\n      \"Things are starting to get hard...\",\n    ],\n  },\n];\n\nexport default Puzzles;","import { Modal, Paper } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport Puzzles from \"../Puzzles\";\n\n// Automatically opens when description is updated.\nexport default function TurnDescription({turn, onDismiss} : {turn: number, onDismiss: any}) {\n  const [lastAcknowledgedTurn, setLastAcknowledgedTurn] = useState(turn);\n  const [show, setShow] = useState(true);\n  useEffect(() => {\n    if (turn !== lastAcknowledgedTurn) {\n      setShow(true);\n    }\n  }, [lastAcknowledgedTurn, turn]);\n  const onClose = () => {\n    setShow(false);\n    setLastAcknowledgedTurn(turn);\n    onDismiss();\n  };\n  const puzzle = Puzzles[turn - 1];\n  return <Modal open={show} onClose={onClose} onClick={onClose}>\n    <Paper variant=\"outlined\" className=\"event-modal\">\n      <div className=\"event-body\">\n        <h1>{puzzle.title}</h1>\n        {puzzle.description.map((descriptionLine, i) => <p key={i}>{descriptionLine}</p>)}\n        <p><em>Press Escape or click/tap anywhere to continue...</em></p>\n      </div>\n    </Paper>\n  </Modal>;\n}","import { LinearProgress } from \"@material-ui/core\";\n\nexport default function TrackProgress({progress, max}: {progress: number | null, max: number}) {\n  return <LinearProgress className=\"progress-bar\" variant=\"determinate\" value={\n    100.0 * (progress === null ? 0 : progress + 1) / max\n  }/>;\n}","import {\n  BoardProps \n} from 'boardgame.io/react'\n\nimport {\n  Button,\n  Grid,\n} from '@material-ui/core';\n\nimport CardSequence from './CardSequence';\nimport SampleGrid from './SampleGrid';\nimport { GameState, StepState } from '../Types';\nimport { range } from 'lodash';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { DEFAULT_BPM, DEFAULT_TRACK_BARS, SECONDS_PER_STEP, STEP_COUNT } from '../Constants';\nimport * as Tone from 'tone';\nimport { Time } from 'tone/build/esm/core/type/Units';\nimport LevelDescription from './LevelDescription';\nimport TrackProgress from './TrackProgress';\nimport { Player, Sequence } from 'tone';\nimport { CSSTransition, SwitchTransition } from 'react-transition-group';\nimport Cards from '../Cards';\nimport ReactMarkdown from 'react-markdown';\n\nfunction ContinueButton({G, onClick} : {G: GameState, onClick: any} ) {\n  const enabled = G.hasClearedLevel;\n  return <Button variant=\"contained\" onClick={onClick} disabled={!enabled} className={enabled ? \"glow\" : \"\"}>\n    next\n  </Button>;\n}\nconst keyMapper: { [key: string]: {pitch: string, duration: string}} = {\n  cy: {\n    pitch: \"f4\",\n    duration: \"2n\",\n  },\n  bd: {\n    pitch: \"e4\",\n    duration: \"16n\",\n  },\n  ch: {\n    pitch: \"d4\",\n    duration: \"16n\",\n  },\n  sd: {\n    pitch: \"c4\",\n    duration: \"16n\",\n  }\n};\n\nconst sampler = new Tone.Sampler({\n  urls: {\n    // Cymbal\n    f4: \"CY/E808_CY-12[short].ogg\",\n    // Bass Drum\n    e4: \"BD/E808_BD[short]-03.wav\",\n    // Closed Hat\n    d4: \"CH/E808_CH-06.wav\",\n    // Snare\n    c4: \"SD/E808_SD-07.wav\",\n  },\n  baseUrl: process.env.PUBLIC_URL + \"/samples/808/\"\n}).toDestination();\n\nexport default function Board({\n  G, ctx, moves  \n} : React.HTMLAttributes<HTMLElement> & BoardProps<GameState>)\n{\n  const {\n    title,\n    hasClearedLevel,\n    hints,\n    levelTrack,\n    playerParts,\n    targetParts,\n    playerHand,\n    playerSchedule,\n    startingSchedule,\n    overrideTrackBars,\n    overrideBPM,\n  } = G;\n  const trackBars = overrideTrackBars ?? DEFAULT_TRACK_BARS;\n  const bpm = overrideBPM ?? DEFAULT_BPM;\n  useEffect(() => {\n    Tone.Transport.bpm.value = bpm;\n    Tone.start();\n    Tone.Transport.start();\n    return () => {\n      Tone.Transport.stop();\n    }\n  }, [bpm]);\n  const [npcDialog, setNpcDialog] = useState(hints);\n  const [selectedPart, setSelectedPart] = useState(0);\n  useEffect(() => {\n    // On new level or card played/removed.\n    if (playerSchedule.length === startingSchedule.length) {\n      setNpcDialog(hints);\n    }\n    if (playerSchedule.length > 0) {\n      const lastCard = Cards[playerSchedule[0]];\n      const partOfLastCard = playerParts.findIndex((e) => e.sample === lastCard.sampleTarget);\n      if (partOfLastCard >= 0) {\n        setSelectedPart(partOfLastCard);\n      }\n    }\n  }, [hints, playerParts, playerSchedule, startingSchedule.length]);\n  useEffect(() => {\n    setSelectedPart(0);\n  }, [ctx.turn]);\n  const [currentlyPlayingStep, setCurrentlyPlayingStep] = useState<number | null>(null);\n  const [lastPlayedStep, setLastPlayedStep] = useState<number | null>(null);\n  const [currentTime, setCurrentTime] = useState<Time | undefined>(undefined);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [playerActive, setPlayerActive] = useState(true);\n  const [player, setPlayer] = useState<Player | null>(null);\n  const [sequence, setSequence] = useState<Sequence | null>(null);\n  const onStep = (time: Time, stepId: number) => {\n    // This is a bit subtle: time has to be set before step.\n    // Only step triggers the sample side effect.\n    setCurrentTime(time);\n    setCurrentlyPlayingStep(stepId);\n  };\n  const play = () => {\n    if (isPlaying) {\n      return;\n    }\n    const sequencer = new Tone.Sequence(\n      onStep,\n      // One extra beat to resolve animations.\n      range(STEP_COUNT * trackBars + 1),\n      \"16n\"\n    );\n    // Just to prevent overlap.\n    stop();\n    setSequence(sequencer);\n    const player = new Tone.Player(\n      levelTrack,\n      () => {\n        setIsPlaying(true);\n        Tone.start();\n        sequencer.loop = false;\n        sequencer.start();\n      }\n    ).toDestination();\n    setPlayer(player);\n    player.loop = false;\n    player.autostart = true;\n  };\n  const stop = useCallback(() => {\n    if (!isPlaying) {\n      return;\n    }\n    setCurrentTime(undefined);\n    setLastPlayedStep(null);\n    setCurrentlyPlayingStep(null);\n    sequence?.stop();\n    setSequence(null);\n    player?.stop();\n    setPlayer(null);\n    setIsPlaying(false);\n    setPlayerActive(true);\n  }, [isPlaying, sequence, player]);\n  useEffect(() => {\n    if (lastPlayedStep === currentlyPlayingStep) {\n      return;\n    }\n    if(typeof currentTime === 'undefined') {\n      return;\n    }\n    if (currentlyPlayingStep === null) {\n      return;\n    }\n    if (!isPlaying) {\n      return;\n    }\n    if (currentlyPlayingStep >= (STEP_COUNT * trackBars)) {\n      stop();\n      return;\n    }\n    setLastPlayedStep(currentlyPlayingStep);\n    // stepIndex selects from our step sequencer, which is only 16th notes on repeat.\n    const stepIndex = currentlyPlayingStep % STEP_COUNT;\n    const parts = playerActive ? playerParts : targetParts;\n    for (let part of parts) {\n      if (part.steps[stepIndex] !== StepState.OFF) {\n        sampler.triggerAttackRelease(\n          keyMapper[part.sample].pitch, \n          keyMapper[part.sample].duration,\n          currentTime,\n          part.steps[stepIndex] / 2\n        );\n      }\n    }\n  }, [currentTime, playerParts, targetParts, currentlyPlayingStep, lastPlayedStep, playerActive, isPlaying, stop, trackBars])\n  const onViewCard = (i: number) => {\n    const selectedCard = Cards[playerHand[i]];\n    if (selectedCard) {\n      setNpcDialog([selectedCard.description]);\n    }\n  };\n  return <Grid container className=\"game-board\" alignItems=\"center\" justify=\"center\">\n    <LevelDescription\n      key={\"ld:\" + ctx.turn}\n      turn={ctx.turn}\n      onDismiss={() => {\n        // On a new level, play the target first.\n        setPlayerActive(false);\n        play();\n      }}\n    />\n    <Grid item xs={12} key=\"title\">\n      <h1>{ctx.turn}: {title}</h1>\n    </Grid>\n    <Grid item xs={3} className=\"pc-area portrait-area\" key=\"pc-area\">\n      <div className=\"pc portrait\">\n        <Button\n          variant=\"contained\"\n          disabled={playerActive}\n          className={playerActive ? \"selected\" : \"\"}\n          onClick={() => {\n            setPlayerActive(true);\n            play();\n          }}\n        >\n          My Parts\n        </Button>\n      </div>\n    </Grid>\n    <Grid item xs={6} className=\"parts-area\">\n      <Grid container className=\"parts\" justify=\"center\" key=\"parts\">\n        <Grid item xs={1} key=\"time-elapsed\">\n          {isPlaying && \n            <span>\n              {((currentlyPlayingStep ?? 0)  * SECONDS_PER_STEP).toFixed(1)}\n            </span>\n          }\n        </Grid>\n        <Grid item xs={10} key=\"progress\">\n          <TrackProgress progress={currentlyPlayingStep} max={trackBars * STEP_COUNT} />\n        </Grid>\n        <Grid item xs={1} key=\"time-remaining\">\n          {isPlaying && \n            <span>\n              {(((trackBars * STEP_COUNT) - (currentlyPlayingStep ?? 0))  * SECONDS_PER_STEP).toFixed(1)}\n            </span>\n          }\n        </Grid>\n        <Grid item xs={12} className=\"start-stop\" key=\"start-stop\">\n          <Button\n            className={isPlaying ? \"stop\" : \"play\"}\n            onClick={isPlaying ? stop : play}\n          >\n            &nbsp;\n          </Button>\n        </Grid>\n        <Grid item xs={12} className=\"current-parts\">\n          <SwitchTransition>\n            <CSSTransition\n              key={playerActive ? \"current\": \"target\"}\n              timeout={200}\n              classNames={playerActive ? \"current\": \"target\"}\n            >\n              <SampleGrid\n                parts={playerActive ? playerParts : targetParts}\n                currentlyPlayingStep={currentlyPlayingStep}\n                className={\"sampler \" + (playerActive ? \"current\" : \"target\")}\n                tabIndex={selectedPart}\n                setTabIndex={setSelectedPart}\n              />\n            </CSSTransition>\n          </SwitchTransition>\n        </Grid>\n      </Grid>\n      <Grid item xs={12} className=\"dialogue\">\n        { typeof(npcDialog) !== 'undefined' && \n          <div>\n            <ReactMarkdown children={npcDialog.join('\\n\\n')}/>\n          </div>\n        }\n      </Grid>\n    </Grid>\n    <Grid item xs={3} className=\"npc-area portrait-area\" key=\"npc-area\">\n      <div className=\"npc portrait\">\n        <Button\n          variant=\"contained\"\n          disabled={!playerActive}\n          className={!playerActive ? \"selected\" : \"\"}\n          onClick={() => {\n            setPlayerActive(false);\n            play();\n          }}\n        >\n          Goal \n        </Button>\n      </div>\n    </Grid>\n    <Grid item xs={5} className=\"hand-area\" key=\"hand-area\">\n      <div className=\"label\">\n        <h3>To-Do</h3>\n      </div>\n      <CardSequence\n        key={\"hand:\" + ctx.turn}\n        cards={playerHand}\n        onClickCard={(i: number) => {\n          moves.playCard(i);\n          setPlayerActive(true);\n          play();\n          onViewCard(i);\n        }}\n        buttonLabel=\"Place\"\n        className=\"hand\"\n        unremovable={0}\n        emphasizeButton={!hasClearedLevel}\n      />\n    </Grid>\n    <Grid item xs={2} className=\"next-day\" key=\"next-day\">\n      <Grid container>\n        <Grid item xs={12}>\n          <Button variant=\"contained\" onClick={moves.clearSchedule}>Reset</Button>\n        </Grid>\n        <Grid item xs={12} className=\"break\"></Grid>\n        <Grid item xs={12}>\n          <ContinueButton G={G} onClick={\n            () => {\n              moves.commitSchedule();\n              stop();\n            }\n          }/>\n        </Grid>\n      </Grid>\n    </Grid>\n    <Grid item xs={5} className=\"schedule-area\" key=\"schedule-area\">\n      <div className=\"label\">\n        <h3>Schedule</h3>\n      </div>\n      <CardSequence\n        key={\"schedule:\" + ctx.turn}\n        cards={playerSchedule}\n        onClickCard={(i: number) => {\n          moves.removeCard(i);\n          play();\n        }}\n        buttonLabel=\"Remove\"\n        className=\"schedule\"\n        unremovable={G.startingSchedule.length}\n        emphasizeButton={false}\n      />\n    </Grid>\n  </Grid>;\n}","import { Ctx, Game } from 'boardgame.io';\n\nimport Puzzles from './Puzzles';\nimport Cards from './Cards';\n\nimport { STEP_COUNT } from './Constants';\nimport { GameState, Part, StepSequence, StepState } from './Types';\nimport { INVALID_MOVE } from 'boardgame.io/core';\nimport { reverse } from 'lodash';\n\n\nexport const FLIP:string = \"flip\";\n\nconst EmptyPart: () => StepSequence = () => Array.from({length: STEP_COUNT}, () => StepState.OFF);\n\nconst SetupTurn = (turn: number, oldG?: GameState) => {\n  const puzzle = Puzzles[turn - 1];\n  const playerParts: Array<Part> = puzzle.targetParts.map(\n    (part: Part) => ({\n      sample: part.sample,\n      steps: EmptyPart()\n    })\n  );\n  const newG = {\n    // Immutable stuff.\n    ...puzzle,\n    // Changing stuff.\n    playerParts,\n    playerHand: [...puzzle.startingHand],\n    playerSchedule: [...(puzzle.startingSchedule ?? [])],\n    hasClearedLevel: oldG?.hasClearedLevel ?? false,\n  };\n  // Apply any fixed cards.\n  (puzzle.startingSchedule ?? []).forEach((cardId) => Cards[cardId].playCard(newG))\n  return newG;\n}\n\nexport const CheckLevelComplete: (G: GameState) => boolean = (G: GameState) => {\n  for (const [targetPartIndex, targetPart] of G.targetParts.entries()) {\n    const currentPart = G.playerParts[targetPartIndex];\n    for (let i: number = 0; i < STEP_COUNT; i++) {\n      if (currentPart.steps[i] !== targetPart.steps[i]) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nexport const MyGame: Game = {\n  moves: {\n    playCard: (G: GameState, ctx: Ctx, handSlot: number) => {\n      const cardId = G.playerHand[handSlot];\n      const card = Cards[cardId];\n      if (!card) {\n        return INVALID_MOVE;\n      }\n      card.playCard(G); \n      // Remove the played card.\n      G.playerHand.splice(handSlot, 1);\n      // Add it to the play stack.\n      G.playerSchedule.unshift(cardId);\n      if (CheckLevelComplete(G)) {\n        G.hasClearedLevel = true;\n      }\n    },\n    removeCard: (G: GameState, ctx: Ctx, playerScheduleSlot: number) => {\n      if (G.playerSchedule.length - playerScheduleSlot <= G.startingSchedule.length) {\n        return INVALID_MOVE;\n      }\n\n      const removedCardId = G.playerSchedule[playerScheduleSlot];\n      if (!removedCardId) {\n        return INVALID_MOVE;\n      }\n\n      // Reset the turn and re-apply the cards in sequence. \n      const cleanState: GameState = SetupTurn(ctx.turn, G);\n      \n      // Add the removed card back to the hand.\n      cleanState.playerHand = [...G.playerHand];\n      cleanState.playerHand.unshift(removedCardId);\n\n      const inOrderStack = reverse([...G.playerSchedule]);\n      console.log(inOrderStack);\n      // Re-play the remaining cards in stack order.\n      for (const [replayedCardIndex, replayedCardId] of inOrderStack.entries()) {\n        if (G.playerSchedule.length - replayedCardIndex - 1 === playerScheduleSlot) {\n          // Ignore this removed card.\n          // We need to use the original index.\n          continue;\n        }\n        if (replayedCardIndex < G.startingSchedule.length) {\n          // Not removable...\n          continue;\n        }\n        const replayedCard = Cards[replayedCardId];\n        replayedCard.playCard(cleanState);\n        cleanState.playerSchedule.unshift(replayedCardId);\n      }\n      if (CheckLevelComplete(cleanState)) {\n        G.hasClearedLevel = true;\n      }\n      return cleanState;\n    },\n    clearSchedule: (G: GameState, ctx: Ctx) => {\n      if (CheckLevelComplete(G)) {\n        G.hasClearedLevel = true;\n      }\n      return SetupTurn(ctx.turn, G);\n    },\n    commitSchedule: (G: GameState, ctx: Ctx) => {\n      if (G.hasClearedLevel) {\n        ctx.events?.endTurn?.();\n      }\n    },\n  },\n  turn: {\n    onBegin: (G: GameState, ctx: Ctx) => SetupTurn(ctx.turn)\n  }\n};","import './App.css';\nimport { Client } from 'boardgame.io/react';\nimport Board from './component/Board';\nimport { MyGame } from './Game';\n\nconst App = Client({ game: MyGame, board: Board, numPlayers: 1, debug: true });\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}