{"version":3,"sources":["Types.ts","Constants.ts","Cards.ts","component/SampleGrid.tsx","component/CardSequence.tsx","Puzzles.ts","Game.ts","component/LevelDescription.tsx","component/Board.tsx","App.js","reportWebVitals.js","index.js"],"names":["StepState","StepAction","STEP_COUNT","GRID_WIDTH","ApplyPatternToPart","pattern","part","updatedSteps","steps","entries","stepIndex","stepAction","currentStep","INCREMENT","OFF","ON","ACCENT","DECREMENT","MAX","ZERO","SHIFT_UP","SHIFT_RIGHT","SHIFT_DOWN","SHIFT_LEFT","processStep","CardImpl","flavor","title","description","image","sampleTarget","this","G","playerParts","sample","Cards","layFlat","IGNORE","fold","drop","mop","sweep","vacuum","feast","bus","rinse","scour","dry","laundry","floor","dishes","PatternRows","classSequence","chunkedGrid","chunk","map","row","rowId","className","cellClass","colId","Paper","variant","PartGrid","parts","currentlyPlayingStep","remainingProps","useState","tabIndex","setTabIndex","cellClasses","take","step","index","key","AppBar","position","Tabs","value","onChange","_","newValue","p","Tab","label","style","minWidth","SampleGrid","ActionCard","cardId","cardIndex","buttonLabel","onClickCard","onClickEnabled","setSelectedCard","isSelectedCard","card","maybeClassSequence","Card","onClick","CardContent","CardActions","Button","disabled","BASIC_CARD_CLASSES","range","i","CardSequence","cards","unremovable","length","selectedCard","lastSelectedCard","setLastSelectedCard","cardClasses","setCardClasses","useEffect","newClasses","newClass","clickCard","TransitionGroup","component","CSSTransition","exit","classNames","timeout","zIndex","LT_PREFIX","process","Puzzles","levelTrack","targetParts","startingHand","startingSchedule","SetupTurn","turn","puzzle","Array","from","newG","playerHand","playerSchedule","forEach","playCard","CheckLevelComplete","targetPartIndex","targetPart","currentPart","MyGame","moves","ctx","handSlot","splice","push","removeCard","playerScheduleSlot","INVALID_MOVE","cleanState","removedCardId","replayedCardIndex","replayedCardId","clearSchedule","commitSchedule","events","endTurn","onBegin","TurnDescription","onDismiss","lastAcknowledgedTurn","setLastAcknowledgedTurn","show","setShow","onClose","Modal","open","descriptionLine","ContinueButton","enabled","keyMapper","bd","ch","sd","sampler","Tone","urls","e4","d4","c4","baseUrl","toDestination","App","Client","game","board","bpm","start","stop","setCurrentlyPlayingStep","lastPlayedStep","setLastPlayedStep","undefined","currentTime","setCurrentTime","isPlaying","setIsPlaying","playerActive","setPlayerActive","triggerAttackRelease","onStep","time","stepId","play","sequencer","player","loop","autostart","Grid","container","alignItems","justify","item","xs","numPlayers","debug","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.908a2d2d.chunk.js","sourcesContent":["/**\n * This represents the top-level data model of the game.\n * Any concept of global consequence should be declared (but not implemented) here.\n * Because the compiler can traverse the dependency graph just fine, the order of declaration\n * should be for human consumption.\n * Thus, top level concepts are presented first, and their dependencies are declared later.\n */\n\n\n////////////////////////////////\n// Puzzle Configuration\n\nexport interface Puzzle {\n  title: string;\n  description: Array<string>;\n  levelTrack: string;\n  // The musical composition the player is aiming to replicate.\n  targetParts: Array<Part>;\n  // The cards you start with in your hand.\n  startingHand: Array<CardId>;\n  // Any initial state that cannot be removed.\n  startingSchedule: Array<CardId>;\n}\n\nexport interface Part {\n  sample: string;\n  steps: StepSequence;\n};\n\nexport type StepSequence = Array<StepState>;\n\nexport enum StepState {\n  OFF = 0,\n  ON = 1,\n  ACCENT = 2,\n};\n\n//////////////////////////////////////////////////////////\n// Gameplay State (i.e. when trying to solve the puzzle)\n\n// Keep this serializable for easy state management.\nexport interface GameState extends Puzzle {\n  // The player's current parts.\n  playerParts: Array<Part>;\n  // The player's current hand.\n  playerHand: Array<CardId>;\n  // The player's current schedule.\n  playerSchedule: Array<CardId>;\n}\n\n// The card identifier is just a string for now. This keeps things serializable.\nexport type CardId = string;\n\n//////////////////////////////////////////////////////////\n// Card Concepts\n\nexport interface CardFlavor {\n  title: string;\n  description: string;\n  image?: string;\n};\n\nexport interface Card extends CardFlavor {\n  // Pattern cards have special UI considerations.\n  sampleTarget?: string;\n  pattern?: Pattern;\n  playCard: CardAction;\n};\n\nexport type Pattern = Array<StepAction>;\n\nexport enum StepAction {\n  INCREMENT,\n  DECREMENT,\n  ZERO,\n  MAX,\n  SHIFT_UP,\n  SHIFT_RIGHT,\n  SHIFT_DOWN,\n  SHIFT_LEFT,\n  IGNORE,\n};\n\nexport type CardAction = (G: GameState) => void;","export const GRID_WIDTH: number = 4;\nexport const GRID_HEIGHT: number = 4;\nexport const STEP_COUNT: number = GRID_WIDTH * GRID_HEIGHT;\nexport const DEFAULT_BPM: number = 116;\nexport const MAX_HAND_SIZE: number = 6;\nexport const TRACK_BARS: number = 8;\n","import { GRID_WIDTH, STEP_COUNT } from \"./Constants\";\nimport { Card, CardFlavor, GameState, Part, Pattern, StepAction, StepState } from \"./Types\";\n\n// Separate from CardImpl, for UI/preview purposes.\nexport const ApplyPatternToPart: (pattern: Pattern, part: Part) => void = (pattern, part) => {\n  const updatedSteps = [...part.steps];\n  for (const [stepIndex, stepAction] of pattern.entries()) {\n    const processStep: () => StepState = () => {\n      const currentStep = part.steps[stepIndex];\n      switch (stepAction) {\n        case StepAction.INCREMENT:\n          if (currentStep === StepState.OFF) {\n            return StepState.ON;\n          } else {\n            return StepState.ACCENT;\n          }\n        case StepAction.DECREMENT:\n          if (currentStep === StepState.ACCENT) {\n            return StepState.ON;\n          } else {\n            return StepState.OFF;\n          }\n        case StepAction.MAX:\n          return StepState.ACCENT;\n        case StepAction.ZERO:\n          return StepState.OFF;\n        case StepAction.SHIFT_UP:\n          if (stepIndex + GRID_WIDTH > STEP_COUNT) {\n            return StepState.OFF\n          }\n          return part.steps[stepIndex + GRID_WIDTH];\n        case StepAction.SHIFT_RIGHT:\n          if ((stepIndex % GRID_WIDTH) === 0) {\n            return StepState.OFF;\n          }\n          return part.steps[stepIndex - 1];\n        case StepAction.SHIFT_DOWN:\n          if (stepIndex - GRID_WIDTH < 0) {\n            return StepState.OFF;\n          }\n          return part.steps[stepIndex - GRID_WIDTH];\n        case StepAction.SHIFT_LEFT:\n          if ((stepIndex % GRID_WIDTH) + 1 === GRID_WIDTH) {\n            return StepState.OFF;\n          }\n          return part.steps[stepIndex + 1];\n        default:\n          return currentStep;\n      }\n    }\n    updatedSteps[stepIndex] = processStep();\n  }\n  part.steps = updatedSteps;\n}\n\nclass CardImpl implements Card {\n  title: string;\n  description: string;\n  image?: string;\n  sampleTarget?: string;\n  pattern?: Pattern;\n\n  constructor(flavor: CardFlavor, pattern?: Pattern, part?: string) {\n    this.title = flavor.title;\n    this.description = flavor.description;\n    this.image = flavor.image;\n    this.pattern = pattern;\n    this.sampleTarget = part;\n  }\n\n  playCard(G: GameState) {\n    for (const part of G.playerParts) {\n      if (part.sample !== this.sampleTarget) {\n        continue;\n      }\n      if (this.pattern) {\n        ApplyPatternToPart(this.pattern, part);\n      }\n    }\n  }\n}\n\nconst Cards : {[key: string]: Card} = {\n  layFlat: new CardImpl(\n    {\n      title: \"Lay Flat\",\n      description: \"Lay your shirt flat on your bed. The foundation of any laundry folding routine.\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"sd\"\n  ),\n  fold: new CardImpl(\n    {\n      title: \"Fold\",\n      description: \"Fold your shirt. Add some complexity! (Assuming you have something to start with...)\"\n    },\n    [\n      StepAction.DECREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.DECREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"sd\"\n  ),\n  drop: new CardImpl(\n    {\n      title: \"Drop\",\n      description: \"Oops! You dropped your [?] all over the floor. What a mess...\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT,\n      StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT,\n      StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT,\n      StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT,\n    ],\n    \"bd\"\n  ),\n  mop: new CardImpl(\n    {\n      title: \"Mop\",\n      description: \"Mop the floor. This mess might be a bit too much to soak up though.\"\n    },\n    [\n      StepAction.DECREMENT, StepAction.DECREMENT, StepAction.IGNORE, StepAction.DECREMENT,\n      StepAction.DECREMENT, StepAction.DECREMENT, StepAction.IGNORE, StepAction.DECREMENT,\n      StepAction.DECREMENT, StepAction.DECREMENT, StepAction.IGNORE, StepAction.DECREMENT,\n      StepAction.DECREMENT, StepAction.DECREMENT, StepAction.IGNORE, StepAction.DECREMENT,\n    ],\n    \"bd\"\n  ),\n  sweep: new CardImpl(\n    {\n      title: \"Sweep\",\n      description: \"Sweep the floor. It's a bit hard to reach that corner.\"\n    },\n    [\n      StepAction.ZERO, StepAction.SHIFT_RIGHT, StepAction.SHIFT_RIGHT, StepAction.SHIFT_RIGHT,\n      StepAction.ZERO, StepAction.SHIFT_RIGHT, StepAction.SHIFT_RIGHT, StepAction.SHIFT_RIGHT,\n      StepAction.ZERO, StepAction.SHIFT_RIGHT, StepAction.SHIFT_RIGHT, StepAction.SHIFT_RIGHT,\n      StepAction.ZERO, StepAction.SHIFT_RIGHT, StepAction.SHIFT_RIGHT, StepAction.SHIFT_RIGHT,\n    ],\n    \"bd\"\n  ),\n  vacuum: new CardImpl(\n    {\n      title: \"Vacuum\",\n      description: \"Suck up whatever is left. (Maybe leave 4 [?]s on the floor?)\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT,\n    ],\n    \"bd\"\n  ),\n  feast: new CardImpl(\n    {\n      title: \"Feast\",\n      description: \"What a delicious meal! What are we going to do about all the dishes?\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT,\n      StepAction.IGNORE, StepAction.INCREMENT, StepAction.IGNORE, StepAction.INCREMENT,\n      StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT,\n      StepAction.IGNORE, StepAction.INCREMENT, StepAction.IGNORE, StepAction.INCREMENT,\n    ],\n    \"ch\"\n  ),\n  bus: new CardImpl(\n    {\n      title: \"Bus\",\n      description: \"What a delicious meal! What are we going to do about all the dishes?\"\n    },\n    [\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_LEFT, StepAction.SHIFT_LEFT, StepAction.ZERO,\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_LEFT, StepAction.SHIFT_LEFT, StepAction.ZERO,\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_LEFT, StepAction.SHIFT_LEFT, StepAction.ZERO,\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_LEFT, StepAction.SHIFT_LEFT, StepAction.ZERO,\n    ],\n    \"ch\"\n  ),\n  rinse: new CardImpl(\n    {\n      title: \"Rinse\",\n      description: \"Rinse the dishes. This will make them easier to clean.\"\n    },\n    [\n      StepAction.IGNORE, StepAction.ZERO, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.ZERO, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.ZERO, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.ZERO, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"ch\"\n  ),\n  scour: new CardImpl(\n    {\n      title: \"Scour\",\n      description: \"Scour the dishes. Really put your back into it.\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.INCREMENT, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.INCREMENT, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.INCREMENT, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.INCREMENT, StepAction.IGNORE,\n    ],\n    \"ch\"\n  ),\n  dry: new CardImpl(\n    {\n      title: \"Dry\",\n      description: \"Let the dishes dry. What a lovely sight!\"\n    },\n    [\n      StepAction.DECREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.DECREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.DECREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.DECREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"ch\"\n  ),\n  laundry: new CardImpl(\n    {\n      title: \"Laundry\",\n      description: \"Do the laundry. You know how!\"\n    },\n    [\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"sd\"\n  ),\n  floor: new CardImpl(\n    {\n      title: \"Floor\",\n      description: \"Clean the floor. You know how!\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"bd\"\n  ),\n  dishes: new CardImpl(\n    {\n      title: \"Dishes\",\n      description: \"Do the dishes. You know how!\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.MAX, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.MAX, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.MAX, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.MAX, StepAction.IGNORE,\n    ],\n    \"ch\"\n  )\n};\n\nexport default Cards;","import React, { useState } from 'react';\n\nimport {\n  AppBar,\n  Paper,\n  Tab,\n  Tabs,\n} from '@material-ui/core';\n\nimport {\n  chunk,\n  take,\n} from 'lodash';\n\nimport {\n  GRID_WIDTH,\n  STEP_COUNT,\n} from '../Constants';\nimport { Part, StepSequence, StepState } from '../Types';\n\nexport function PatternRows(\n  { classSequence, ...remainingProps } : React.HTMLAttributes<HTMLElement> & {\n    classSequence: Array<string>,\n  }\n) {\n  const chunkedGrid: Array<Array<string>> = chunk(classSequence, GRID_WIDTH);\n  return <>\n    {\n    chunkedGrid.map((row: Array<string>, rowId: number) => (\n      <tr key={\"row \" + rowId} className=\"row\">\n      {\n        row.map((cellClass: string, colId: number) => {\n          return (\n            <td key={\"col \" + colId} className={cellClass}>\n              <Paper className=\"step\" variant=\"outlined\"/>\n            </td>\n          );\n        })\n      }\n      </tr>\n    ))\n    }\n  </>;\n};\n\nfunction PartGrid(\n  { parts, currentlyPlayingStep, ...remainingProps }: React.HTMLAttributes<HTMLElement> & {\n    parts: Array<Part>, currentlyPlayingStep: number | null\n  }\n)\n{\n  const [tabIndex, setTabIndex] = useState(0);\n  const {\n    steps\n  } = parts[tabIndex];\n  const truncatedSteps: StepSequence = take(steps, STEP_COUNT);\n  const cellClasses: Array<string> = truncatedSteps.map((step: StepState, index: number) => {\n    let cellClass = \"cell \";\n    cellClass += StepState[step] as string + \" \";\n    if (currentlyPlayingStep !== null && index === currentlyPlayingStep % STEP_COUNT) {\n      cellClass += \"playing\";\n    }\n    return cellClass;\n  });\n\n  return (\n    <table {...remainingProps} key={tabIndex}>\n      <caption>\n        <AppBar position=\"relative\">\n          <Tabs\n            variant=\"fullWidth\"\n            value={tabIndex}\n            onChange={(_, newValue: number) => setTabIndex(newValue)}\n            className=\"part-selector\"\n          >\n            {\n              parts.map((p: Part, index: number) =>\n                <Tab\n                  key={\"tab \" + index}\n                  label={p.sample}\n                  style={{ minWidth: 48 }}\n                />\n              )\n            }\n          </Tabs>\n        </AppBar>\n      </caption>\n      <tbody>\n        <PatternRows\n          classSequence={cellClasses}\n        />\n      </tbody>\n    </table>\n  );\n}\n\nexport default function SampleGrid(\n  { parts, currentlyPlayingStep, ...remainingProps }: React.HTMLAttributes<HTMLElement> & {\n    parts: Array<Part>, currentlyPlayingStep: number | null \n  }\n) {\n  return <>\n    <PartGrid\n      parts={parts}\n      currentlyPlayingStep={currentlyPlayingStep}\n      {...remainingProps}\n    />\n  </>\n};","import { Button, Card, CardActions, CardContent } from \"@material-ui/core\";\nimport { range } from \"lodash\";\nimport { ReactElement, useEffect, useState } from \"react\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\nimport Cards from '../Cards';\nimport { MAX_HAND_SIZE } from \"../Constants\";\nimport { CardId, StepAction } from \"../Types\";\nimport { PatternRows } from \"./SampleGrid\";\n\nexport function ActionCard({\n  cardId, cardIndex, buttonLabel, onClickCard, onClickEnabled, setSelectedCard, isSelectedCard,\n}: {\n  cardId: CardId, cardIndex: number, buttonLabel: string, onClickCard: any,\n  onClickEnabled: boolean, setSelectedCard: any, isSelectedCard: boolean\n} & React.HTMLAttributes<HTMLDivElement>) : ReactElement\n{\n  const card = Cards[cardId];\n  const maybeClassSequence = card.pattern?.map(\n    (stepAction: StepAction) => \"cell \" + StepAction[stepAction] as string\n  );\n  // TODO: Figure out how to make this nice on touch.\n  return <Card\n    variant=\"outlined\"\n    className=\"card\"\n    onClick={() => {\n      setSelectedCard(isSelectedCard ? 0 : cardIndex)\n    }}\n  >\n    <CardContent>\n      <h2>{card.title}</h2>\n      {card.sampleTarget && <span>{card.sampleTarget}</span>}\n      {maybeClassSequence && \n        <table className=\"pattern\">\n          <tbody>\n            <PatternRows\n              classSequence={maybeClassSequence}\n            />\n          </tbody>\n        </table>\n      }\n      <p>{card.description}</p>\n    </CardContent> \n    <CardActions>\n      <Button\n        variant=\"contained\"\n        onClick={()=>onClickCard(cardIndex)}\n        disabled={!onClickEnabled}\n      >\n        {buttonLabel}\n      </Button>         \n    </CardActions>\n  </Card>;\n};\n\nexport function EmptyCardSlot(): ReactElement {\n  return <Card variant=\"outlined\" className=\"card empty\">\n    <CardContent>\n      &nbsp;\n    </CardContent> \n  </Card>\n}\n\nconst BASIC_CARD_CLASSES = range(MAX_HAND_SIZE).map((i) => \"card-hide\");\n\nexport default function CardSequence({\n  cards, buttonLabel, onClickCard, unremovable, className, ...remainingProps\n}: {\n  cards: Array<CardId>, buttonLabel: string, onClickCard: any, unremovable: number\n} & React.HTMLAttributes<HTMLDivElement>) {\n  const [selectedCard, setSelectedCard] = useState(cards.length - 1);\n  const [lastSelectedCard, setLastSelectedCard] = useState(0);\n  const [cardClasses, setCardClasses] = useState(BASIC_CARD_CLASSES);\n  useEffect(() => {\n    if (cards.length === 0) {\n      setCardClasses(BASIC_CARD_CLASSES);\n      setLastSelectedCard(0);\n      setSelectedCard(0);\n      return;\n    }\n    if (lastSelectedCard === selectedCard) {\n      return;\n    }\n    // We need to do a little bit of state machine magic to get the right animations.\n    const newClasses: Array<string> = [...BASIC_CARD_CLASSES]\n    for (let i = 0; i < MAX_HAND_SIZE; i++) {\n      const computeClass: () => string = () => {\n        if (selectedCard > 0) {\n          if (i < selectedCard) {\n            // To the left of the action. Use hide-card.\n            if ((i < lastSelectedCard || lastSelectedCard === 0)) {\n              return \"stay-hidden\";\n            } else {\n              return \"hide\";\n            }\n          } else {\n            if (lastSelectedCard > 0 && i >= lastSelectedCard) {\n              return \"stay-displaced\";\n            } else {\n              return \"displace\";\n            }\n          }\n        } else {\n          if (i < lastSelectedCard) {\n            return \"stay-hidden\";\n          } else {\n            return \"hide\";\n          }\n        }\n      };\n      const newClass = computeClass();\n      newClasses[i] = \"card-\" + newClass;\n    }\n    setCardClasses(newClasses);\n    setLastSelectedCard(selectedCard);\n  }, [cards, selectedCard, lastSelectedCard]);\n\n  const clickCard = (index: number) => {\n    if (index >= unremovable) {\n      onClickCard(index);\n    }\n  }\n\n  return <div className={\"sequence \" + className}>\n    <TransitionGroup component={null}>\n    {\n    cards.map((cardId: CardId, index: number) => \n      <CSSTransition key={index} exit={true} classNames=\"card\" timeout={200}>\n        <div className={\"card-slot \" + cardClasses[index]} style={{zIndex: MAX_HAND_SIZE - index}}>\n          <ActionCard\n            cardId={cardId}\n            cardIndex={index}\n            buttonLabel={buttonLabel}\n            onClickCard={() => clickCard(index)}\n            onClickEnabled={index >= unremovable}\n            setSelectedCard={setSelectedCard}\n            isSelectedCard={index === selectedCard}\n          />\n        </div>\n      </CSSTransition>\n    )\n    }\n    </TransitionGroup>\n  </div>;\n};","import { Puzzle, StepState } from \"./Types\";\n\nconst LT_PREFIX = process.env.PUBLIC_URL + \"/samples/levels/\";\nconst Puzzles: Array<Puzzle> = [\n  // 0\n  {\n    title: \"The Laundry\",\n    description: [\n      \"laundry laundry laundry\",\n      \"laundry laundry\"\n    ],\n    levelTrack: `${LT_PREFIX}dummy116bpm.ogg`,\n    targetParts: [\n      {\n        sample: \"sd\",\n        steps: [\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n        ],\n      },\n    ],\n    startingHand: [\n      \"layFlat\",\n      \"fold\",\n    ],\n    startingSchedule: [],\n  },\n  // 1\n  {\n    title: \"The Floor\",\n    description: [\n      \"floor sweepy sweepy floor\",\n      \"sweepy sweepy floor floor\"\n    ],\n    levelTrack: `${LT_PREFIX}dummy116bpm.ogg`,\n    targetParts: [\n      {\n        sample: \"bd\",\n        steps: [\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n        ],\n      },\n    ],\n    startingHand:  [\n      \"mop\",\n      \"sweep\",\n      \"vacuum\",\n    ],\n    startingSchedule: [\n      \"drop\",\n    ]\n  },\n  // 2\n  {\n    title: \"The Dishes\",\n    description: [\n      \"dishy dishy wishy wash\",\n      \"washa dishy dish dish\"\n    ],\n    levelTrack: `${LT_PREFIX}dummy116bpm.ogg`,\n    targetParts: [\n      {\n        sample: \"ch\",\n        steps: [\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n        ],\n      },\n    ],\n    startingHand: [\n      \"bus\",\n      \"rinse\",\n      \"scour\",\n      \"dry\",\n    ],\n    startingSchedule: [\n      \"feast\",\n    ],\n  },\n  // 3\n  {\n    title: \"Putting it All Together\",\n    description: [\n      \"every every thing thing\",\n      \"all at once\"\n    ],\n    levelTrack: `${LT_PREFIX}dummy116bpm.ogg`,\n    targetParts: [\n      {\n        sample: \"sd\",\n        steps: [\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n        ],\n      },\n      {\n        sample: \"bd\",\n        steps: [\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n        ],\n      },\n      {\n        sample: \"ch\",\n        steps: [\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n        ],\n      },\n    ],\n    startingHand: [\n      \"laundry\",\n      \"floor\",\n      \"dishes\",\n    ],\n    startingSchedule: []\n  },\n];\n\nexport default Puzzles;","import { Ctx, Game } from 'boardgame.io';\n\nimport Puzzles from './Puzzles';\nimport Cards from './Cards';\n\nimport { STEP_COUNT } from './Constants';\nimport { GameState, Part, StepSequence, StepState } from './Types';\nimport { INVALID_MOVE } from 'boardgame.io/core';\n\n\nexport const FLIP:string = \"flip\";\n\nconst EmptyPart: () => StepSequence = () => Array.from({length: STEP_COUNT}, () => StepState.OFF);\n\nconst SetupTurn = (turn: number) => {\n  const puzzle = Puzzles[turn - 1];\n  const playerParts: Array<Part> = puzzle.targetParts.map(\n    (part: Part) => ({\n      sample: part.sample,\n      steps: EmptyPart()\n    })\n  );\n  const newG = {\n    // Immutable stuff.\n    ...puzzle,\n    // Changing stuff.\n    playerParts,\n    playerHand: [...puzzle.startingHand],\n    playerSchedule: [...(puzzle.startingSchedule ?? [])],\n  };\n  // Apply any fixed cards.\n  (puzzle.startingSchedule ?? []).forEach((cardId) => Cards[cardId].playCard(newG))\n  return newG;\n}\n\nexport const CheckLevelComplete: (G: GameState) => boolean = (G: GameState) => {\n  for (const [targetPartIndex, targetPart] of G.targetParts.entries()) {\n    const currentPart = G.playerParts[targetPartIndex];\n    for (let i: number = 0; i < STEP_COUNT; i++) {\n      if (currentPart.steps[i] !== targetPart.steps[i]) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nexport const MyGame: Game = {\n  moves: {\n    playCard: (G: GameState, ctx: Ctx, handSlot: number) => {\n      const cardId = G.playerHand[handSlot];\n      const card = Cards[cardId];\n      card.playCard(G); \n      // Remove the played card.\n      G.playerHand.splice(handSlot, 1);\n      // Add it to the play stack.\n      G.playerSchedule.push(cardId);\n    },\n    removeCard: (G: GameState, ctx: Ctx, playerScheduleSlot: number) => {\n      if (playerScheduleSlot < G.startingSchedule.length) {\n        return INVALID_MOVE;\n      }\n      // Reset the turn and re-apply the cards in sequence. \n      const cleanState: GameState = SetupTurn(ctx.turn);\n      \n      // Add the removed card back to the hand.\n      cleanState.playerHand = [...G.playerHand];\n      const removedCardId = G.playerSchedule[playerScheduleSlot];\n      cleanState.playerHand.push(removedCardId);\n\n      // Re-play the remaining cards.\n      for (const [replayedCardIndex, replayedCardId] of G.playerSchedule.entries()) {\n        if (replayedCardIndex === playerScheduleSlot || replayedCardIndex < G.startingSchedule.length) {\n          // Ignore this removed card.\n          continue;\n        }\n        const replayedCard = Cards[replayedCardId];\n        replayedCard.playCard(cleanState);\n        cleanState.playerSchedule.push(replayedCardId);\n      }\n      return cleanState;\n    },\n    clearSchedule: (G: GameState, ctx: Ctx) => {\n      return SetupTurn(ctx.turn);\n    },\n    commitSchedule: (G: GameState, ctx: Ctx) => {\n      if (CheckLevelComplete(G)) {\n        ctx.events?.endTurn?.();\n      }\n    },\n  },\n  turn: {\n    onBegin: (G: GameState, ctx: Ctx) => SetupTurn(ctx.turn)\n  }\n};","import { Modal, Paper } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport Puzzles from \"../Puzzles\";\n\n// Automatically opens when description is updated.\nexport default function TurnDescription({turn, onDismiss} : {turn: number, onDismiss: any}) {\n  const [lastAcknowledgedTurn, setLastAcknowledgedTurn] = useState(turn);\n  const [show, setShow] = useState(true);\n  useEffect(() => {\n    if (turn !== lastAcknowledgedTurn) {\n      setShow(true);\n    }\n  }, [lastAcknowledgedTurn, turn]);\n  const onClose = () => {\n    setShow(false);\n    setLastAcknowledgedTurn(turn);\n    onDismiss();\n  };\n  const puzzle = Puzzles[turn - 1];\n  return <Modal open={show} onClose={onClose} onClick={onClose}>\n    <Paper variant=\"outlined\" className=\"event-modal\">\n      <div className=\"event-body\">\n        <h1>{puzzle.title}</h1>\n        {puzzle.description.map((descriptionLine, i) => <p key={i}>{descriptionLine}</p>)}\n        <p>Press Escape or click/tap anywhere to continue...</p>\n      </div>\n    </Paper>\n  </Modal>;\n}","import {\n  BoardProps \n} from 'boardgame.io/react'\n\nimport {\n  Button,\n  Grid,\n} from '@material-ui/core';\n\nimport CardSequence from './CardSequence';\nimport SampleGrid from './SampleGrid';\nimport { GameState, StepState } from '../Types';\nimport { CheckLevelComplete } from '../Game';\nimport { range } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { DEFAULT_BPM, STEP_COUNT, TRACK_BARS } from '../Constants';\nimport * as Tone from 'tone';\nimport { Time } from 'tone/build/esm/core/type/Units';\nimport LevelDescription from './LevelDescription';\n\nfunction ContinueButton({G, onClick} : {G: GameState, onClick: any} ) {\n  const enabled = CheckLevelComplete(G);\n  return <Button variant=\"contained\" onClick={onClick} disabled={!enabled}>\n   Next Day \n  </Button>;\n}\nconst keyMapper: { [key: string]: string } = {\n  bd: \"e4\",\n  ch: \"d4\",\n  sd: \"c4\",\n};\n\nconst sampler = new Tone.Sampler({\n  urls: {\n    // Bass Drum\n    e4: \"BD/E808_BD[short]-03.wav\",\n    // Closed Hat\n    d4: \"CH/E808_CH-06.wav\",\n    // Snare\n    c4: \"SD/E808_SD-03.wav\",\n  },\n  baseUrl: process.env.PUBLIC_URL + \"/samples/808/\"\n}).toDestination();\n\nexport default function Board({\n  G, ctx, moves  \n} : React.HTMLAttributes<HTMLElement> & BoardProps<GameState>)\n{\n  const {\n    title,\n    levelTrack,\n    playerParts,\n    targetParts,\n    playerHand,\n    playerSchedule,\n  } = G;\n  useEffect(() => {\n    Tone.Transport.bpm.value = DEFAULT_BPM;\n    Tone.Transport.start();\n    return () => {\n      Tone.Transport.stop();\n    }\n  }, []);\n  const [currentlyPlayingStep, setCurrentlyPlayingStep] = useState<number | null>(null);\n  const [lastPlayedStep, setLastPlayedStep] = useState<number | null>(null);\n  const [currentTime, setCurrentTime] = useState<Time | undefined>(undefined);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [playerActive, setPlayerActive] = useState(true);\n  useEffect(() => {\n    if (lastPlayedStep === currentlyPlayingStep) {\n      return;\n    }\n    if(typeof currentTime === 'undefined') {\n      return;\n    }\n    if (currentlyPlayingStep === null) {\n      return;\n    }\n    setLastPlayedStep(currentlyPlayingStep);\n    // stepIndex selects from our step sequencer, which is only 16th notes on repeat.\n    const stepIndex = currentlyPlayingStep % STEP_COUNT;\n    const parts = playerActive ? playerParts : targetParts;\n    for (let part of parts) {\n      if (part.steps[stepIndex] !== StepState.OFF) {\n        sampler.triggerAttackRelease(keyMapper[part.sample], \"16n\", currentTime, part.steps[stepIndex] / 2);\n      }\n    }\n    if (currentlyPlayingStep >= (STEP_COUNT * TRACK_BARS) - 1) {\n      setIsPlaying(false);\n      setCurrentTime(undefined);\n      setCurrentlyPlayingStep(null);\n      return;\n    }\n  }, [currentTime, playerParts, targetParts, currentlyPlayingStep, lastPlayedStep, playerActive])\n  const onStep = (time: Time, stepId: number) => {\n    // This is a bit subtle: time has to be set before step.\n    // Only step triggers the sample side effect.\n    setCurrentTime(time);\n    setCurrentlyPlayingStep(stepId);\n  };\n  const play = () => {\n    if (isPlaying) {\n      return;\n    }\n    const sequencer = new Tone.Sequence(\n      onStep,\n      range(STEP_COUNT * TRACK_BARS),\n      \"16n\"\n    );\n    const player = new Tone.Player(\n      levelTrack,\n      () => {\n        setIsPlaying(true);\n        Tone.start();\n        sequencer.loop = false;\n        sequencer.start();\n      }\n    ).toDestination();\n    player.loop = false;\n    player.autostart = true;\n  };\n  return <Grid container className=\"game-board\" alignItems=\"center\" justify=\"center\">\n    <LevelDescription\n      turn={ctx.turn}\n      onDismiss={() => {\n        // On a new level, play the target first.\n        setPlayerActive(false);\n        play();\n      }}\n    />\n    <Grid item xs={12} className=\"title\" key=\"title\">\n      <h1>{ctx.turn}: {title}</h1>\n    </Grid>\n    <Grid container className=\"parts\" justify=\"center\" key=\"parts\">\n      <Grid item xs={1} className=\"current-parts\">\n        <SampleGrid\n          parts={playerParts}\n          currentlyPlayingStep={playerActive ? currentlyPlayingStep : null}\n          className=\"sampler player\"\n        />\n        <Button\n          variant=\"contained\"\n          disabled={playerActive}\n          onClick={() => {\n            setPlayerActive(true);\n            play();\n          }}\n        >\n          Current\n        </Button>\n      </Grid>\n      <Grid item xs={1} className=\"target-parts\">\n        <SampleGrid\n          parts={targetParts}\n          currentlyPlayingStep={!playerActive ? currentlyPlayingStep : null}\n          className=\"sampler player\"\n        />\n        <Button\n          variant=\"contained\"\n          disabled={!playerActive}\n          onClick={() => {\n            setPlayerActive(false);\n            play();\n          }}\n        >\n          Target\n        </Button>\n      </Grid>\n    </Grid>\n    <Grid item xs={6} className=\"hand-area\" key=\"hand-area\">\n      <h3>To-Do</h3>\n      <CardSequence\n        cards={playerHand}\n        onClickCard={(i: number) => {\n          moves.playCard(i);\n          play();\n        }}\n        buttonLabel=\"Enqueue\"\n        className=\"hand\"\n        unremovable={0}\n      />\n    </Grid>\n    <Grid item xs={6} className=\"schedule-area\" key=\"schedule-area\">\n      <h3>Schedule</h3>\n      <CardSequence\n        cards={playerSchedule}\n        onClickCard={(i: number) => {\n          moves.removeCard(i);\n          play();\n        }}\n        buttonLabel=\"Remove\"\n        className=\"schedule\"\n        unremovable={G.startingSchedule.length}\n      />\n    </Grid>\n    <Grid item xs={12} className=\"next-day\" key=\"next-day\">\n      <Button variant=\"contained\" onClick={moves.clearSchedule}>Clear Schedule</Button>\n      &nbsp;\n      <ContinueButton G={G} onClick={moves.commitSchedule}/>\n    </Grid>\n  </Grid>;\n}","import './App.css';\nimport { Client } from 'boardgame.io/react';\nimport Board from './component/Board';\nimport { MyGame } from './Game';\n\nconst App = Client({ game: MyGame, board: Board, numPlayers: 1, debug: false });\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}