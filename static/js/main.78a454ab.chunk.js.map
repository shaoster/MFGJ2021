{"version":3,"sources":["Types.ts","Cards.ts","component/SampleGrid.tsx","Constants.ts","component/CardSequence.tsx","Puzzles.ts","Game.ts","App.js","component/Board.tsx","reportWebVitals.js","index.js"],"names":["StepState","StepAction","ApplyPatternToPart","pattern","part","entries","stepIndex","SET_ACCENTED","steps","ACCENT","SET_ON","ON","SET_OFF","OFF","CardImpl","flavor","title","description","image","sampleTarget","this","G","playerParts","sample","console","log","Cards","layFlat","fold","IGNORE","PatternRows","classSequence","chunkedGrid","chunk","map","row","rowId","className","cellClass","colId","Paper","variant","PartGrid","parts","currentlyPlayingStep","remainingProps","useState","tabIndex","setTabIndex","cellClasses","take","GRID_WIDTH","step","index","key","AppBar","position","Tabs","value","onChange","_","newValue","p","Tab","label","keyMapper","bd","ch","sd","sampler","Tone","urls","e4","d4","c4","baseUrl","process","toDestination","SampleGrid","useEffect","bpm","start","stop","setCurrentlyPlayingStep","isPlaying","setIsPlaying","play","a","sequencer","time","stepId","triggerAttackRelease","range","STEP_COUNT","loop","Button","onClick","disabled","ActionCard","cardId","cardIndex","buttonLabel","onClickCard","undefined","card","maybeClassSequence","stepAction","Card","CardContent","CardActions","CardSequence","cards","Grid","container","Puzzles","targetParts","startingHand","SetupTurn","turn","puzzle","Array","from","length","playerHand","playerSchedule","activePart","MyGame","moves","playCard","ctx","handSlot","splice","push","removeCard","playerScheduleSlot","cleanState","removedCardId","replayedCardIndex","replayedCardId","replayedCard","commitSchedule","targetPartIndex","targetPart","currentPart","i","CheckLevelComplete","events","endTurn","onBegin","App","Client","game","board","item","xs","numPlayers","debug","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78a454ab.chunk.js","sourcesContent":["/**\n * This represents the top-level data model of the game.\n * Any concept of global consequence should be declared (but not implemented) here.\n * Because the compiler can traverse the dependency graph just fine, the order of declaration\n * should be for human consumption.\n * Thus, top level concepts are presented first, and their dependencies are declared later.\n */\n\n\n////////////////////////////////\n// Puzzle Configuration\n\nexport interface Puzzle {\n  title: string;\n  // The musical composition the player is aiming to replicate.\n  targetParts: Array<Part>;\n  // The \n  startingHand: Array<CardId>;\n}\n\nexport interface Part {\n  sample: string;\n  steps: StepSequence;\n};\n\nexport type StepSequence = Array<StepState>;\n\nexport enum StepState {\n  OFF = 0,\n  ON = 1,\n  ACCENT = 2,\n};\n\n//////////////////////////////////////////////////////////\n// Gameplay State (i.e. when trying to solve the puzzle)\n\n// Keep this serializable for easy state management.\nexport interface GameState {\n  playerParts: Array<Part>;\n  targetParts: Array<Part>;\n  // The set of cards the player can choose from.\n  playerHand: Array<CardId>;\n  // The sequence of cards the player has chosen to play.\n  playerSchedule: Array<CardId>;\n}\n\n// The card identifier is just a string for now. This keeps things serializable.\nexport type CardId = string;\n\n//////////////////////////////////////////////////////////\n// Card Concepts\n\nexport interface CardFlavor {\n  title: string;\n  description: string;\n  image?: string;\n};\n\nexport interface Card extends CardFlavor {\n  // Pattern cards have special UI considerations.\n  sampleTarget?: string;\n  pattern?: Pattern;\n  playCard: CardAction;\n};\n\nexport type Pattern = Array<StepAction>;\n\nexport enum StepAction {\n  SET_ACCENTED,\n  SET_ON,\n  SET_OFF,\n  IGNORE,\n};\n\nexport type CardAction = (G: GameState) => void;","import { Card, CardFlavor, GameState, Part, Pattern, StepAction, StepState } from \"./Types\";\n\n// Separate from CardImpl, for UI/preview purposes.\nexport const ApplyPatternToPart: (pattern: Pattern, part: Part) => void = (pattern, part) => {\n  for (const [stepIndex, stepAction] of pattern.entries()) {\n    switch (stepAction) {\n      case StepAction.SET_ACCENTED:\n        part.steps[stepIndex] = StepState.ACCENT;\n        break;\n      case StepAction.SET_ON:\n        part.steps[stepIndex] = StepState.ON;\n        break;\n      case StepAction.SET_OFF:\n        part.steps[stepIndex] = StepState.OFF;\n        break;\n      default:\n        continue;\n    }\n  }\n}\n\nclass CardImpl implements Card {\n  title: string;\n  description: string;\n  image?: string;\n  sampleTarget?: string;\n  pattern?: Pattern;\n\n  constructor(flavor: CardFlavor, pattern?: Pattern, part?: string) {\n    this.title = flavor.title;\n    this.description = flavor.description;\n    this.image = flavor.image;\n    this.pattern = pattern;\n    this.sampleTarget = part;\n  }\n\n  playCard(G: GameState) {\n    for (const part of G.playerParts) {\n      if (part.sample !== this.sampleTarget) {\n        continue;\n      }\n      console.log(this.pattern);\n      if (this.pattern) {\n        ApplyPatternToPart(this.pattern, part);\n      }\n    }\n  }\n}\n\nconst Cards : {[key: string]: Card} = {\n  // Every Beat.\n  layFlat: new CardImpl(\n    {\n      title: \"Lay Flat\",\n      description: \"Lay your shirt flat on your bed.\"\n    },\n    [\n      StepAction.SET_ON, StepAction.SET_OFF, StepAction.SET_OFF, StepAction.SET_OFF,\n      StepAction.SET_ON, StepAction.SET_OFF, StepAction.SET_OFF, StepAction.SET_OFF,\n      StepAction.SET_ON, StepAction.SET_OFF, StepAction.SET_OFF, StepAction.SET_OFF,\n      StepAction.SET_ON, StepAction.SET_OFF, StepAction.SET_OFF, StepAction.SET_OFF,\n    ],\n    \"sd\"\n  ),\n  // Every Beat.\n  fold: new CardImpl(\n    {\n      title: \"Fold\",\n      description: \"Fold your shirt. Wouldn't this be easier if the shirt were laid flat?\"\n    },\n    [\n      StepAction.SET_OFF, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.SET_OFF, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"sd\"\n  ),\n};\n\nexport default Cards;","import React, { Component, ComponentFactory, useEffect, useState } from 'react';\n\nimport * as Tone from \"tone\";\n\nimport {\n  AppBar,\n  Button,\n  Paper,\n  Tab,\n  Tabs,\n} from '@material-ui/core';\n\nimport {\n  chunk,\n  range,\n  take,\n} from 'lodash';\n\nimport {\n  DEFAULT_BPM,\n  GRID_WIDTH,\n  STEP_COUNT,\n} from '../Constants';\nimport { Part, StepSequence, StepState } from '../Types';\n\nexport function PatternRows(\n  { classSequence, ...remainingProps } : React.HTMLAttributes<HTMLElement> & {\n    classSequence: Array<string>,\n  }\n) {\n  const chunkedGrid: Array<Array<string>> = chunk(classSequence, GRID_WIDTH);\n  return <>\n    {\n    chunkedGrid.map((row: Array<string>, rowId: number) => (\n      <tr key={\"row \" + rowId} className=\"row\">\n      {\n        row.map((cellClass: string, colId: number) => {\n          const stepId = rowId * GRID_WIDTH + colId;\n          return (\n            <td key={\"col \" + colId} className={cellClass}>\n              <Paper className=\"step\" variant=\"outlined\"/>\n            </td>\n          );\n        })\n      }\n      </tr>\n    ))\n    }\n  </>;\n};\n\nfunction PartGrid(\n  { parts, currentlyPlayingStep, ...remainingProps }: React.HTMLAttributes<HTMLElement> & {\n    parts: Array<Part>, currentlyPlayingStep: number | null\n  }\n)\n{\n  const [tabIndex, setTabIndex] = useState(0);\n  const {\n    steps\n  } = parts[tabIndex];\n  const truncatedSteps: StepSequence = take(steps, STEP_COUNT);\n  const cellClasses: Array<string> = truncatedSteps.map((step: StepState, index: number) => {\n    let cellClass = \"cell \";\n    cellClass += StepState[step] as string + \" \";\n    if (index === currentlyPlayingStep) {\n      cellClass += \"playing\";\n    }\n    return cellClass;\n  });\n\n  return (\n    <table {...remainingProps} key={tabIndex}>\n      <caption>\n        <AppBar position=\"relative\">\n          <Tabs value={tabIndex} onChange={(_, newValue: number) => setTabIndex(newValue)} className=\"part-selector\">\n            {\n              parts.map((p: Part, index: number) => <Tab key={\"tab \" + index} label={p.sample}/>)\n            }\n          </Tabs>\n        </AppBar>\n      </caption>\n      <tbody>\n        <PatternRows\n          classSequence={cellClasses}\n        />\n      </tbody>\n    </table>\n  );\n}\nconst keyMapper: { [key: string]: string } = {\n  bd: \"e4\",\n  ch: \"d4\",\n  sd: \"c4\",\n};\n\nconst sampler = new Tone.Sampler({\n  urls: {\n    // Bass Drum\n    e4: \"BD/E808_BD[short]-03.wav\",\n    // Closed Hat\n    d4: \"CH/E808_CH-06.wav\",\n    // Snare\n    c4: \"SD/E808_SD-03.wav\",\n  },\n  baseUrl: process.env.PUBLIC_URL + \"/samples/808/\"\n}).toDestination();\n\nexport default function SampleGrid(\n  { parts, ...remainingProps }: React.HTMLAttributes<HTMLElement> & { parts: Array<Part> }\n) {\n  useEffect(() => {\n    Tone.Transport.bpm.value = DEFAULT_BPM;\n    Tone.Transport.start();\n    return () => {\n      Tone.Transport.stop();\n    }\n  }, []);\n  const [currentlyPlayingStep, setCurrentlyPlayingStep] = useState<number | null>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const play = async () => {\n    const sequencer = new Tone.Sequence(\n      (time, stepId: number) => {\n        if (stepId >= STEP_COUNT) {\n          // Dummy fence-post.\n          setCurrentlyPlayingStep(null);\n          setIsPlaying(false);\n          return;\n        }\n        setCurrentlyPlayingStep(stepId);\n        for (let part of parts) {\n          if (part.steps[stepId]) {\n            sampler.triggerAttackRelease(keyMapper[part.sample], \"16n\", time);\n          }\n        }\n      },\n      range(STEP_COUNT + 1),\n      \"16n\"\n    );\n    setIsPlaying(true);\n    Tone.start();\n    sequencer.loop = false;\n    sequencer.start();\n  };\n  return <>\n    <PartGrid\n      parts={parts}\n      currentlyPlayingStep={currentlyPlayingStep}\n      {...remainingProps}\n    />\n  <Button variant=\"contained\" onClick={play} disabled={isPlaying}>{ isPlaying ? \"Playing\" : \"Play\" }</Button>\n  </>\n};","export const GRID_WIDTH: number = 4;\nexport const GRID_HEIGHT: number = 4;\nexport const STEP_COUNT: number = GRID_WIDTH * GRID_HEIGHT;\nexport const DEFAULT_BPM: number = 79;\n","import { Button, Card, CardActions, CardContent, Grid } from \"@material-ui/core\";\n\nimport Cards from '../Cards';\nimport { CardId, StepAction } from \"../Types\";\nimport { PatternRows } from \"./SampleGrid\";\n\nexport function ActionCard({\n  cardId, cardIndex, buttonLabel, onClickCard=undefined\n}: {cardId: CardId, cardIndex: number, buttonLabel: string, onClickCard: any} & React.HTMLAttributes<HTMLDivElement>)\n{\n  const card = Cards[cardId];\n  const maybeClassSequence = card.pattern?.map(\n    (stepAction: StepAction) => \"cell \" + StepAction[stepAction] as string\n  );\n  return <Card variant=\"outlined\" className=\"card\">\n    <CardContent>\n      <h2>{card.title}</h2>\n      {maybeClassSequence && \n        <table className=\"pattern\">\n          <PatternRows\n            classSequence={maybeClassSequence}\n          />\n        </table>\n      }\n      <p>{card.description}</p>\n    </CardContent> \n    <CardActions>\n      <Button\n        variant=\"contained\"\n        onClick={()=>onClickCard(cardIndex)}\n        disabled={!onClickCard}\n      >\n        {buttonLabel}\n      </Button>         \n    </CardActions>\n  </Card>;\n};\n\nexport default function CardSequence({\n  cards, buttonLabel, onClickCard=undefined, ...remainingProps\n}: {cards: Array<CardId>, buttonLabel: string, onClickCard: any} & React.HTMLAttributes<HTMLDivElement>)\n{\n  return <Grid container {...remainingProps}>\n    {\n    cards.map((cardId: string, index: number) => (\n      <ActionCard\n        cardId={cardId}\n        cardIndex={index}\n        buttonLabel={buttonLabel}\n        onClickCard={onClickCard}\n      />\n    ))\n    }\n  </Grid>;\n};","import { Puzzle, StepState } from \"./Types\";\n\nconst Puzzles: Array<Puzzle> = [\n  // 0\n  {\n    title: \"The Laundry\",\n    targetParts: [\n      {\n        sample: \"sd\",\n        steps: [\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n        ],\n      },\n    ],\n    startingHand: [\n      \"layFlat\",\n      \"fold\",\n    ]\n  },\n  // 1\n  {\n    title: \"The Floor\",\n    targetParts: [\n      {\n        sample: \"bd\",\n        steps: [\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n        ],\n      },\n    ],\n    startingHand:  [\n      \"sweep\",\n      \"sweep\",\n      \"sweep\",\n      \"sweep\",\n    ]\n  },\n  // 2\n  {\n    title: \"The Dishes\",\n    targetParts: [\n      {\n        sample: \"ch\",\n        steps: [\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n        ],\n      },\n    ],\n    startingHand: [\n      \"rinse\",\n      \"scour\",\n      \"rinse\",\n      \"scour\",\n    ],\n  },\n  // 3\n  {\n    title: \"Putting it All Together\",\n    targetParts: [\n      {\n        sample: \"sd\",\n        steps: [\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n        ],\n      },\n      {\n        sample: \"bd\",\n        steps: [\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n        ],\n      },\n      {\n        sample: \"ch\",\n        steps: [\n          StepState.ON, StepState.OFF, StepState.ON, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ON, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ON, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ON, StepState.ON,\n        ],\n      },\n    ],\n    startingHand: [\n      \"roomba\",\n      \"dishwasher\",\n      \"laundryBot\"\n    ],\n  },\n];\n\nexport default Puzzles;","import { Ctx, Game } from 'boardgame.io';\n\nimport Puzzles from './Puzzles';\nimport Cards from './Cards';\n\nimport { STEP_COUNT } from './Constants';\nimport { GameState, Part, StepSequence, StepState } from './Types';\n\n\nexport const FLIP:string = \"flip\";\n\nconst EmptyPart: () => StepSequence = () => Array.from({length: STEP_COUNT}, () => StepState.OFF);\n\nconst SetupTurn = (turn: number) => {\n  const puzzle = Puzzles[turn - 1];\n  const playerParts: Array<Part> = puzzle.targetParts.map(\n    (part: Part) => ({\n      sample: part.sample,\n      steps: EmptyPart()\n    })\n  );\n  return {\n    ...puzzle,\n    // TBD: Start empty for now.\n    playerParts,\n    playerHand: puzzle.startingHand,\n    playerSchedule: [],\n    // Initially there are no active parts.\n    activePart: null,\n  }\n}\n\nexport const CheckLevelComplete: (G: GameState) => boolean = (G: GameState) => {\n  for (const [targetPartIndex, targetPart] of G.targetParts.entries()) {\n    const currentPart = G.playerParts[targetPartIndex];\n    for (let i: number = 0; i < STEP_COUNT; i++) {\n      if (currentPart.steps[i] !== targetPart.steps[i]) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nexport const MyGame: Game = {\n  moves: {\n    playCard: (G: GameState, ctx: Ctx, handSlot: number) => {\n      const cardId = G.playerHand[handSlot];\n      const card = Cards[cardId];\n      card.playCard(G); \n      // Remove the played card.\n      G.playerHand.splice(handSlot, 1);\n      // Add it to the play stack.\n      G.playerSchedule.push(cardId);\n    },\n    removeCard: (G: GameState, ctx: Ctx, playerScheduleSlot: number) => {\n      // Reset the turn and re-apply the cards in sequence. \n      const cleanState: GameState = SetupTurn(ctx.turn);\n      \n      // Add the removed card back to the hand.\n      cleanState.playerHand = [...G.playerHand];\n      const removedCardId = G.playerSchedule[playerScheduleSlot];\n      cleanState.playerHand.push(removedCardId);\n\n      // Re-play the remaining cards.\n      for (const [replayedCardIndex, replayedCardId] of G.playerSchedule.entries()) {\n        if (replayedCardIndex === playerScheduleSlot) {\n          // Ignore this removed card.\n          continue;\n        }\n        const replayedCard = Cards[replayedCardId];\n        console.log(cleanState);\n        replayedCard.playCard(cleanState);\n        console.log(cleanState);\n        cleanState.playerSchedule.push(replayedCardId);\n      }\n      return cleanState;\n    },\n    commitSchedule: (G: GameState, ctx: Ctx) => {\n      if (CheckLevelComplete(G)) {\n        ctx.events?.endTurn?.();\n      }\n    },\n  },\n  turn: {\n    onBegin: (G: GameState, ctx: Ctx) => SetupTurn(ctx.turn)\n  }\n};","import './App.css';\nimport { Client } from 'boardgame.io/react';\nimport Board from './component/Board';\nimport { MyGame } from './Game';\n\nconst App = Client({ game: MyGame, board: Board, numPlayers: 1, debug: true});\n\nexport default App;\n","import {\n  BoardProps \n} from 'boardgame.io/react'\n\nimport {\n  Grid,\n} from '@material-ui/core';\n\nimport CardSequence from './CardSequence';\nimport SampleGrid from './SampleGrid';\nimport { GameState } from '../Types';\n\nexport default function Board({G, ctx, moves}: BoardProps<GameState>) {\n  const {\n    playerParts,\n    targetParts,\n  } = G;\n  return <Grid container>\n    <Grid item xs={2} className=\"current-parts\">\n      <h1>Current</h1>\n      <SampleGrid\n        parts={playerParts}\n        className=\"sampler player\"\n      />\n    </Grid>\n    <Grid item xs={2} className=\"target-parts\">\n      <h1>Goal</h1>\n      <SampleGrid\n        parts={targetParts}\n        className=\"sampler goal\"\n      />\n    </Grid>\n    <Grid item xs={6}/>\n    <Grid item xs={12} className=\"hand-area\">\n      <h1>Hand</h1>\n      <CardSequence\n        cards={G.playerHand}\n        onClickCard={moves.playCard}\n        buttonLabel=\"Enqueue\"\n        className=\"hand\"\n      />\n    </Grid>\n    <Grid item xs={12} className=\"schedule-area\">\n      <h1>Schedule</h1>\n      <CardSequence\n        cards={G.playerSchedule}\n        onClickCard={moves.removeCard}\n        buttonLabel=\"Remove\"\n        className=\"schedule\"\n      />\n    </Grid>\n  </Grid>;\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}