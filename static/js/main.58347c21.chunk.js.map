{"version":3,"sources":["Types.ts","Constants.ts","Cards.ts","component/SampleGrid.tsx","component/CardSequence.tsx","Puzzles.ts","Game.ts","component/LevelDescription.tsx","component/TrackProgress.tsx","component/Board.tsx","App.js","reportWebVitals.js","index.js"],"names":["StepState","StepAction","STEP_COUNT","GRID_WIDTH","SECONDS_PER_STEP","ApplyPatternToPart","pattern","part","updatedSteps","steps","entries","stepIndex","stepAction","currentStep","INCREMENT","OFF","ON","ACCENT","DECREMENT","MAX","ZERO","SHIFT_UP","SHIFT_RIGHT","SHIFT_DOWN","SHIFT_LEFT","processStep","CardImpl","flavor","title","description","image","sampleTarget","this","G","playerParts","sample","Cards","layFlat","IGNORE","fold","drop","mop","sweep","vacuum","feast","bus","rinse","scour","dry","laundry","floor","dishes","PatternRows","classSequence","chunkedGrid","chunk","map","row","rowId","className","cellClass","colId","Paper","variant","PartGrid","parts","currentlyPlayingStep","remainingProps","useState","tabIndex","setTabIndex","cellClasses","take","step","index","key","Tabs","value","onChange","_","newValue","p","Tab","label","style","minWidth","SampleGrid","ActionCard","cardId","cardIndex","buttonLabel","onClickCard","onClickEnabled","viewCard","card","maybeClassSequence","Card","onClick","CardContent","CardActions","Button","disabled","BASIC_CARD_CLASSES","range","i","CardSequence","cards","unremovable","selectedCard","setSelectedCard","cardClasses","setCardClasses","length","lastCardCount","setLastCardCount","useEffect","newClasses","newClass","clickCard","TransitionGroup","component","CSSTransition","exit","classNames","timeout","zIndex","LT_PREFIX","process","Puzzles","levelTrack","targetParts","startingHand","startingSchedule","SetupTurn","turn","puzzle","Array","from","newG","playerHand","playerSchedule","forEach","playCard","CheckLevelComplete","targetPartIndex","targetPart","currentPart","MyGame","moves","ctx","handSlot","splice","push","removeCard","playerScheduleSlot","INVALID_MOVE","cleanState","removedCardId","replayedCardIndex","replayedCardId","clearSchedule","commitSchedule","events","endTurn","onBegin","TurnDescription","onDismiss","lastAcknowledgedTurn","setLastAcknowledgedTurn","show","setShow","onClose","Modal","open","descriptionLine","TrackProgress","progress","max","LinearProgress","ContinueButton","enabled","keyMapper","bd","ch","sd","sampler","Tone","urls","e4","d4","c4","baseUrl","toDestination","App","Client","game","board","bpm","start","stop","setCurrentlyPlayingStep","lastPlayedStep","setLastPlayedStep","undefined","currentTime","setCurrentTime","isPlaying","setIsPlaying","playerActive","setPlayerActive","player","setPlayer","sequence","setSequence","triggerAttackRelease","onStep","time","stepId","play","sequencer","loop","autostart","Grid","container","alignItems","justify","item","xs","toFixed","TRACK_BARS","numPlayers","debug","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.58347c21.chunk.js","sourcesContent":["/**\n * This represents the top-level data model of the game.\n * Any concept of global consequence should be declared (but not implemented) here.\n * Because the compiler can traverse the dependency graph just fine, the order of declaration\n * should be for human consumption.\n * Thus, top level concepts are presented first, and their dependencies are declared later.\n */\n\n\n////////////////////////////////\n// Puzzle Configuration\n\nexport interface Puzzle {\n  title: string;\n  description: Array<string>;\n  levelTrack: string;\n  // The musical composition the player is aiming to replicate.\n  targetParts: Array<Part>;\n  // The cards you start with in your hand.\n  startingHand: Array<CardId>;\n  // Any initial state that cannot be removed.\n  startingSchedule: Array<CardId>;\n}\n\nexport interface Part {\n  sample: string;\n  steps: StepSequence;\n};\n\nexport type StepSequence = Array<StepState>;\n\nexport enum StepState {\n  OFF = 0,\n  ON = 1,\n  ACCENT = 2,\n};\n\n//////////////////////////////////////////////////////////\n// Gameplay State (i.e. when trying to solve the puzzle)\n\n// Keep this serializable for easy state management.\nexport interface GameState extends Puzzle {\n  // The player's current parts.\n  playerParts: Array<Part>;\n  // The player's current hand.\n  playerHand: Array<CardId>;\n  // The player's current schedule.\n  playerSchedule: Array<CardId>;\n}\n\n// The card identifier is just a string for now. This keeps things serializable.\nexport type CardId = string;\n\n//////////////////////////////////////////////////////////\n// Card Concepts\n\nexport interface CardFlavor {\n  title: string;\n  description: string;\n  image?: string;\n};\n\nexport interface Card extends CardFlavor {\n  // Pattern cards have special UI considerations.\n  sampleTarget?: string;\n  pattern?: Pattern;\n  playCard: CardAction;\n};\n\nexport type Pattern = Array<StepAction>;\n\nexport enum StepAction {\n  INCREMENT,\n  DECREMENT,\n  ZERO,\n  MAX,\n  SHIFT_UP,\n  SHIFT_RIGHT,\n  SHIFT_DOWN,\n  SHIFT_LEFT,\n  IGNORE,\n};\n\nexport type CardAction = (G: GameState) => void;","export const GRID_WIDTH: number = 4;\nexport const GRID_HEIGHT: number = 4;\nexport const STEP_COUNT: number = GRID_WIDTH * GRID_HEIGHT;\nexport const DEFAULT_BPM: number = 88;\nexport const MAX_HAND_SIZE: number = 6;\nexport const TRACK_BARS: number = 4;\nexport const SECONDS_PER_STEP: number = 60.0 / (GRID_WIDTH * DEFAULT_BPM);","import { GRID_WIDTH, STEP_COUNT } from \"./Constants\";\nimport { Card, CardFlavor, GameState, Part, Pattern, StepAction, StepState } from \"./Types\";\n\n// Separate from CardImpl, for UI/preview purposes.\nexport const ApplyPatternToPart: (pattern: Pattern, part: Part) => void = (pattern, part) => {\n  const updatedSteps = [...part.steps];\n  for (const [stepIndex, stepAction] of pattern.entries()) {\n    const processStep: () => StepState = () => {\n      const currentStep = part.steps[stepIndex];\n      switch (stepAction) {\n        case StepAction.INCREMENT:\n          if (currentStep === StepState.OFF) {\n            return StepState.ON;\n          } else {\n            return StepState.ACCENT;\n          }\n        case StepAction.DECREMENT:\n          if (currentStep === StepState.ACCENT) {\n            return StepState.ON;\n          } else {\n            return StepState.OFF;\n          }\n        case StepAction.MAX:\n          return StepState.ACCENT;\n        case StepAction.ZERO:\n          return StepState.OFF;\n        case StepAction.SHIFT_UP:\n          if (stepIndex + GRID_WIDTH > STEP_COUNT) {\n            return StepState.OFF\n          }\n          return part.steps[stepIndex + GRID_WIDTH];\n        case StepAction.SHIFT_RIGHT:\n          if ((stepIndex % GRID_WIDTH) === 0) {\n            return StepState.OFF;\n          }\n          return part.steps[stepIndex - 1];\n        case StepAction.SHIFT_DOWN:\n          if (stepIndex - GRID_WIDTH < 0) {\n            return StepState.OFF;\n          }\n          return part.steps[stepIndex - GRID_WIDTH];\n        case StepAction.SHIFT_LEFT:\n          if ((stepIndex % GRID_WIDTH) + 1 === GRID_WIDTH) {\n            return StepState.OFF;\n          }\n          return part.steps[stepIndex + 1];\n        default:\n          return currentStep;\n      }\n    }\n    updatedSteps[stepIndex] = processStep();\n  }\n  part.steps = updatedSteps;\n}\n\nclass CardImpl implements Card {\n  title: string;\n  description: string;\n  image?: string;\n  sampleTarget?: string;\n  pattern?: Pattern;\n\n  constructor(flavor: CardFlavor, pattern?: Pattern, part?: string) {\n    this.title = flavor.title;\n    this.description = flavor.description;\n    this.image = flavor.image;\n    this.pattern = pattern;\n    this.sampleTarget = part;\n  }\n\n  playCard(G: GameState) {\n    for (const part of G.playerParts) {\n      if (part.sample !== this.sampleTarget) {\n        continue;\n      }\n      if (this.pattern) {\n        ApplyPatternToPart(this.pattern, part);\n      }\n    }\n  }\n}\n\nconst Cards : {[key: string]: Card} = {\n  layFlat: new CardImpl(\n    {\n      title: \"Lay Flat\",\n      description: \"Lay your shirt flat on your bed. The foundation of any laundry folding routine.\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"sd\"\n  ),\n  fold: new CardImpl(\n    {\n      title: \"Fold\",\n      description: \"Fold your shirt. Add some complexity! (Assuming you have something to start with...)\"\n    },\n    [\n      StepAction.DECREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.DECREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"sd\"\n  ),\n  drop: new CardImpl(\n    {\n      title: \"Drop\",\n      description: \"Oops! You dropped your [?] all over the floor. What a mess...\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT,\n      StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT,\n      StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT,\n      StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT,\n    ],\n    \"bd\"\n  ),\n  mop: new CardImpl(\n    {\n      title: \"Mop\",\n      description: \"Mop the floor. This mess might be a bit too much to soak up though.\"\n    },\n    [\n      StepAction.DECREMENT, StepAction.DECREMENT, StepAction.IGNORE, StepAction.DECREMENT,\n      StepAction.DECREMENT, StepAction.DECREMENT, StepAction.IGNORE, StepAction.DECREMENT,\n      StepAction.DECREMENT, StepAction.DECREMENT, StepAction.IGNORE, StepAction.DECREMENT,\n      StepAction.DECREMENT, StepAction.DECREMENT, StepAction.IGNORE, StepAction.DECREMENT,\n    ],\n    \"bd\"\n  ),\n  sweep: new CardImpl(\n    {\n      title: \"Sweep\",\n      description: \"Sweep the floor. It's a bit hard to reach that corner.\"\n    },\n    [\n      StepAction.ZERO, StepAction.SHIFT_RIGHT, StepAction.SHIFT_RIGHT, StepAction.SHIFT_RIGHT,\n      StepAction.ZERO, StepAction.SHIFT_RIGHT, StepAction.SHIFT_RIGHT, StepAction.SHIFT_RIGHT,\n      StepAction.ZERO, StepAction.SHIFT_RIGHT, StepAction.SHIFT_RIGHT, StepAction.SHIFT_RIGHT,\n      StepAction.ZERO, StepAction.SHIFT_RIGHT, StepAction.SHIFT_RIGHT, StepAction.SHIFT_RIGHT,\n    ],\n    \"bd\"\n  ),\n  vacuum: new CardImpl(\n    {\n      title: \"Vacuum\",\n      description: \"Suck up whatever is left. (Maybe leave 4 [?]s on the floor?)\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT,\n    ],\n    \"bd\"\n  ),\n  feast: new CardImpl(\n    {\n      title: \"Feast\",\n      description: \"What a delicious meal! What are we going to do about all the dishes?\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT,\n      StepAction.IGNORE, StepAction.INCREMENT, StepAction.IGNORE, StepAction.INCREMENT,\n      StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT,\n      StepAction.IGNORE, StepAction.INCREMENT, StepAction.IGNORE, StepAction.INCREMENT,\n    ],\n    \"ch\"\n  ),\n  bus: new CardImpl(\n    {\n      title: \"Bus\",\n      description: \"What a delicious meal! What are we going to do about all the dishes?\"\n    },\n    [\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_LEFT, StepAction.SHIFT_LEFT, StepAction.ZERO,\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_LEFT, StepAction.SHIFT_LEFT, StepAction.ZERO,\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_LEFT, StepAction.SHIFT_LEFT, StepAction.ZERO,\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_LEFT, StepAction.SHIFT_LEFT, StepAction.ZERO,\n    ],\n    \"ch\"\n  ),\n  rinse: new CardImpl(\n    {\n      title: \"Rinse\",\n      description: \"Rinse the dishes. This will make them easier to clean.\"\n    },\n    [\n      StepAction.IGNORE, StepAction.ZERO, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.ZERO, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.ZERO, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.ZERO, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"ch\"\n  ),\n  scour: new CardImpl(\n    {\n      title: \"Scour\",\n      description: \"Scour the dishes. Really put your back into it.\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.INCREMENT, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.INCREMENT, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.INCREMENT, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.INCREMENT, StepAction.IGNORE,\n    ],\n    \"ch\"\n  ),\n  dry: new CardImpl(\n    {\n      title: \"Dry\",\n      description: \"Let the dishes dry. What a lovely sight!\"\n    },\n    [\n      StepAction.DECREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.DECREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.DECREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.DECREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"ch\"\n  ),\n  laundry: new CardImpl(\n    {\n      title: \"Laundry\",\n      description: \"Do the laundry. You know how!\"\n    },\n    [\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"sd\"\n  ),\n  floor: new CardImpl(\n    {\n      title: \"Floor\",\n      description: \"Clean the floor. You know how!\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"bd\"\n  ),\n  dishes: new CardImpl(\n    {\n      title: \"Dishes\",\n      description: \"Do the dishes. You know how!\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.MAX, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.MAX, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.MAX, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.MAX, StepAction.IGNORE,\n    ],\n    \"ch\"\n  )\n};\n\nexport default Cards;","import React, { useState } from 'react';\n\nimport {\n  Paper,\n  Tab,\n  Tabs,\n} from '@material-ui/core';\n\nimport {\n  chunk,\n  take,\n} from 'lodash';\n\nimport {\n  GRID_WIDTH,\n  STEP_COUNT,\n} from '../Constants';\nimport { Part, StepSequence, StepState } from '../Types';\n\nexport function PatternRows(\n  { classSequence, ...remainingProps } : React.HTMLAttributes<HTMLElement> & {\n    classSequence: Array<string>,\n  }\n) {\n  const chunkedGrid: Array<Array<string>> = chunk(classSequence, GRID_WIDTH);\n  return <>\n    {\n    chunkedGrid.map((row: Array<string>, rowId: number) => (\n      <tr key={\"row \" + rowId} className=\"row\">\n      {\n        row.map((cellClass: string, colId: number) => {\n          return (\n            <td key={\"col \" + colId} className={cellClass}>\n              <Paper className=\"step\" variant=\"outlined\"/>\n            </td>\n          );\n        })\n      }\n      </tr>\n    ))\n    }\n  </>;\n};\n\nfunction PartGrid(\n  { parts, currentlyPlayingStep, ...remainingProps }: React.HTMLAttributes<HTMLElement> & {\n    parts: Array<Part>, currentlyPlayingStep: number | null\n  }\n)\n{\n  const [tabIndex, setTabIndex] = useState(0);\n  const {\n    steps,\n    sample,\n  } = parts[tabIndex];\n  const truncatedSteps: StepSequence = take(steps, STEP_COUNT);\n  const cellClasses: Array<string> = truncatedSteps.map((step: StepState, index: number) => {\n    let cellClass = \"cell \";\n    cellClass += StepState[step] as string + \" \";\n    if (currentlyPlayingStep !== null && index === currentlyPlayingStep % STEP_COUNT) {\n      cellClass += \"playing\";\n    }\n    return cellClass;\n  });\n\n  return (\n    <table {...remainingProps} key={tabIndex}>\n      <caption>\n        <Tabs\n          variant=\"fullWidth\"\n          value={tabIndex}\n          onChange={(_, newValue: number) => setTabIndex(newValue)}\n          className=\"part-selector\"\n        >\n          {\n            parts.map((p: Part, index: number) =>\n              <Tab\n                key={\"tab \" + index}\n                label={p.sample}\n                style={{ minWidth: 48 }}\n              />\n            )\n          }\n        </Tabs>\n      </caption>\n      <tbody className={sample}>\n        <PatternRows\n          classSequence={cellClasses}\n        />\n      </tbody>\n    </table>\n  );\n}\n\nexport default function SampleGrid(\n  { parts, currentlyPlayingStep, ...remainingProps }: React.HTMLAttributes<HTMLElement> & {\n    parts: Array<Part>, currentlyPlayingStep: number | null \n  }\n) {\n  return <>\n    <PartGrid\n      parts={parts}\n      currentlyPlayingStep={currentlyPlayingStep}\n      {...remainingProps}\n    />\n  </>\n};","import { Button, Card, CardActions, CardContent } from \"@material-ui/core\";\nimport { range } from \"lodash\";\nimport { ReactElement, useEffect, useState } from \"react\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\nimport Cards from '../Cards';\nimport { MAX_HAND_SIZE } from \"../Constants\";\nimport { CardId, StepAction } from \"../Types\";\nimport { PatternRows } from \"./SampleGrid\";\n\nexport function ActionCard({\n  cardId, cardIndex, buttonLabel, onClickCard, onClickEnabled, viewCard\n}: {\n  cardId: CardId, cardIndex: number, buttonLabel: string, onClickCard: any,\n  onClickEnabled: boolean, viewCard: any\n} & React.HTMLAttributes<HTMLDivElement>) : ReactElement\n{\n  const card = Cards[cardId];\n  const maybeClassSequence = card.pattern?.map(\n    (stepAction: StepAction) => \"cell \" + StepAction[stepAction] as string\n  );\n  // TODO: Figure out how to make this nice on touch.\n  return <Card\n    variant=\"outlined\"\n    className=\"card\"\n    onClick={viewCard}\n  >\n    <CardContent>\n      <h2>{card.title}</h2>\n      {card.sampleTarget && <span>{card.sampleTarget}</span>}\n      {maybeClassSequence && \n        <table className=\"pattern\">\n          <tbody>\n            <PatternRows\n              classSequence={maybeClassSequence}\n            />\n          </tbody>\n        </table>\n      }\n      <p>{card.description}</p>\n    </CardContent> \n    <CardActions>\n      <Button\n        variant=\"contained\"\n        onClick={()=>onClickCard(cardIndex)}\n        disabled={!onClickEnabled}\n      >\n        {buttonLabel}\n      </Button>         \n    </CardActions>\n  </Card>;\n};\n\nexport function EmptyCardSlot(): ReactElement {\n  return <Card variant=\"outlined\" className=\"card empty\">\n    <CardContent>\n      &nbsp;\n    </CardContent> \n  </Card>\n}\n\nconst BASIC_CARD_CLASSES = range(MAX_HAND_SIZE).map((i) => \"card-show\");\n\nexport default function CardSequence({\n  cards, buttonLabel, onClickCard, unremovable, className, ...remainingProps\n}: {\n  cards: Array<CardId>, buttonLabel: string, onClickCard: any, unremovable: number\n} & React.HTMLAttributes<HTMLDivElement>) {\n  const [selectedCard, setSelectedCard] = useState(0);\n  const [cardClasses, setCardClasses] = useState(BASIC_CARD_CLASSES);\n  const [lastCardCount, setLastCardCount] = useState(cards.length);\n  useEffect(() => {\n    if (cards.length !== lastCardCount) {\n      setCardClasses(BASIC_CARD_CLASSES);\n      setSelectedCard(0);\n      setLastCardCount(cards.length);\n      return;\n    }\n    // We need to do a little bit of state machine magic to get the right animations.\n    const newClasses: Array<string> = [...BASIC_CARD_CLASSES]\n    for (let i = 0; i < MAX_HAND_SIZE; i++) {\n      const computeClass: () => string = () => {\n        if (i < selectedCard) {\n          return \"displace\";\n        } else {\n          return \"show\";\n        }\n      }\n      const newClass = computeClass();\n      newClasses[i] = \"card-\" + newClass;\n    }\n    setCardClasses(newClasses);\n  }, [cards, lastCardCount, selectedCard]);\n\n  const clickCard = (index: number) => {\n    if (index >= unremovable) {\n      onClickCard(index);\n    }\n  }\n\n  return <div className={\"sequence \" + className}>\n    <TransitionGroup component={null}>\n    {\n    cards.map((cardId: CardId, index: number) => \n      <CSSTransition key={index} exit={true} classNames=\"card\" timeout={200}>\n        <div className={\"card-slot \" + cardClasses[index]} style={{zIndex: MAX_HAND_SIZE - index}}>\n          <ActionCard\n            cardId={cardId}\n            cardIndex={index}\n            buttonLabel={buttonLabel}\n            onClickCard={() => clickCard(index)}\n            onClickEnabled={index >= unremovable}\n            viewCard={() => setSelectedCard(\n              index !== selectedCard ? index : (\n                index < cards.length - 1 ? \n                  index + 1 : 0 \n              )\n            )}\n          />\n        </div>\n      </CSSTransition>\n    )\n    }\n    </TransitionGroup>\n  </div>;\n};","import { Puzzle, StepState } from \"./Types\";\n\nconst LT_PREFIX = process.env.PUBLIC_URL + \"/samples/levels/\";\nconst Puzzles: Array<Puzzle> = [\n  // 0\n  {\n    title: \"The Laundry\",\n    description: [\n      \"laundry laundry laundry\",\n      \"laundry laundry\"\n    ],\n    levelTrack: `${LT_PREFIX}unmixed_1_1_88_bpm.ogg`,\n    targetParts: [\n      {\n        sample: \"sd\",\n        steps: [\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n        ],\n      },\n    ],\n    startingHand: [\n      \"layFlat\",\n      \"fold\",\n    ],\n    startingSchedule: [],\n  },\n  // 1\n  {\n    title: \"The Floor\",\n    description: [\n      \"floor sweepy sweepy floor\",\n      \"sweepy sweepy floor floor\"\n    ],\n    levelTrack: `${LT_PREFIX}unmixed_1_2_88_bpm.ogg`,\n    targetParts: [\n      {\n        sample: \"bd\",\n        steps: [\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n        ],\n      },\n    ],\n    startingHand:  [\n      \"mop\",\n      \"sweep\",\n      \"vacuum\",\n    ],\n    startingSchedule: [\n      \"drop\",\n    ]\n  },\n  // 2\n  {\n    title: \"The Dishes\",\n    description: [\n      \"dishy dishy wishy wash\",\n      \"washa dishy dish dish\"\n    ],\n    levelTrack: `${LT_PREFIX}unmixed_1_3_88_bpm.ogg`,\n    targetParts: [\n      {\n        sample: \"ch\",\n        steps: [\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n        ],\n      },\n    ],\n    startingHand: [\n      \"bus\",\n      \"rinse\",\n      \"scour\",\n      \"dry\",\n    ],\n    startingSchedule: [\n      \"feast\",\n    ],\n  },\n  // 3\n  {\n    title: \"Putting it All Together\",\n    description: [\n      \"every every thing thing\",\n      \"all at once\"\n    ],\n    levelTrack: `${LT_PREFIX}unmixed_test_song_176_bpm.ogg`,\n    targetParts: [\n      {\n        sample: \"sd\",\n        steps: [\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n        ],\n      },\n      {\n        sample: \"bd\",\n        steps: [\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n        ],\n      },\n      {\n        sample: \"ch\",\n        steps: [\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n        ],\n      },\n    ],\n    startingHand: [\n      \"laundry\",\n      \"floor\",\n      \"dishes\",\n    ],\n    startingSchedule: []\n  },\n];\n\nexport default Puzzles;","import { Ctx, Game } from 'boardgame.io';\n\nimport Puzzles from './Puzzles';\nimport Cards from './Cards';\n\nimport { STEP_COUNT } from './Constants';\nimport { GameState, Part, StepSequence, StepState } from './Types';\nimport { INVALID_MOVE } from 'boardgame.io/core';\n\n\nexport const FLIP:string = \"flip\";\n\nconst EmptyPart: () => StepSequence = () => Array.from({length: STEP_COUNT}, () => StepState.OFF);\n\nconst SetupTurn = (turn: number) => {\n  const puzzle = Puzzles[turn - 1];\n  const playerParts: Array<Part> = puzzle.targetParts.map(\n    (part: Part) => ({\n      sample: part.sample,\n      steps: EmptyPart()\n    })\n  );\n  const newG = {\n    // Immutable stuff.\n    ...puzzle,\n    // Changing stuff.\n    playerParts,\n    playerHand: [...puzzle.startingHand],\n    playerSchedule: [...(puzzle.startingSchedule ?? [])],\n  };\n  // Apply any fixed cards.\n  (puzzle.startingSchedule ?? []).forEach((cardId) => Cards[cardId].playCard(newG))\n  return newG;\n}\n\nexport const CheckLevelComplete: (G: GameState) => boolean = (G: GameState) => {\n  for (const [targetPartIndex, targetPart] of G.targetParts.entries()) {\n    const currentPart = G.playerParts[targetPartIndex];\n    for (let i: number = 0; i < STEP_COUNT; i++) {\n      if (currentPart.steps[i] !== targetPart.steps[i]) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nexport const MyGame: Game = {\n  moves: {\n    playCard: (G: GameState, ctx: Ctx, handSlot: number) => {\n      const cardId = G.playerHand[handSlot];\n      const card = Cards[cardId];\n      card.playCard(G); \n      // Remove the played card.\n      G.playerHand.splice(handSlot, 1);\n      // Add it to the play stack.\n      G.playerSchedule.push(cardId);\n    },\n    removeCard: (G: GameState, ctx: Ctx, playerScheduleSlot: number) => {\n      if (playerScheduleSlot < G.startingSchedule.length) {\n        return INVALID_MOVE;\n      }\n      // Reset the turn and re-apply the cards in sequence. \n      const cleanState: GameState = SetupTurn(ctx.turn);\n      \n      // Add the removed card back to the hand.\n      cleanState.playerHand = [...G.playerHand];\n      const removedCardId = G.playerSchedule[playerScheduleSlot];\n      cleanState.playerHand.push(removedCardId);\n\n      // Re-play the remaining cards.\n      for (const [replayedCardIndex, replayedCardId] of G.playerSchedule.entries()) {\n        if (replayedCardIndex === playerScheduleSlot || replayedCardIndex < G.startingSchedule.length) {\n          // Ignore this removed card.\n          continue;\n        }\n        const replayedCard = Cards[replayedCardId];\n        replayedCard.playCard(cleanState);\n        cleanState.playerSchedule.push(replayedCardId);\n      }\n      return cleanState;\n    },\n    clearSchedule: (G: GameState, ctx: Ctx) => {\n      return SetupTurn(ctx.turn);\n    },\n    commitSchedule: (G: GameState, ctx: Ctx) => {\n      if (CheckLevelComplete(G)) {\n        ctx.events?.endTurn?.();\n      }\n    },\n  },\n  turn: {\n    onBegin: (G: GameState, ctx: Ctx) => SetupTurn(ctx.turn)\n  }\n};","import { Modal, Paper } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport Puzzles from \"../Puzzles\";\n\n// Automatically opens when description is updated.\nexport default function TurnDescription({turn, onDismiss} : {turn: number, onDismiss: any}) {\n  const [lastAcknowledgedTurn, setLastAcknowledgedTurn] = useState(turn);\n  const [show, setShow] = useState(true);\n  useEffect(() => {\n    if (turn !== lastAcknowledgedTurn) {\n      setShow(true);\n    }\n  }, [lastAcknowledgedTurn, turn]);\n  const onClose = () => {\n    setShow(false);\n    setLastAcknowledgedTurn(turn);\n    onDismiss();\n  };\n  const puzzle = Puzzles[turn - 1];\n  return <Modal open={show} onClose={onClose} onClick={onClose}>\n    <Paper variant=\"outlined\" className=\"event-modal\">\n      <div className=\"event-body\">\n        <h1>{puzzle.title}</h1>\n        {puzzle.description.map((descriptionLine, i) => <p key={i}>{descriptionLine}</p>)}\n        <p>Press Escape or click/tap anywhere to continue...</p>\n      </div>\n    </Paper>\n  </Modal>;\n}","import { LinearProgress } from \"@material-ui/core\";\n\nexport default function TrackProgress({progress, max}: {progress: number | null, max: number}) {\n  return <LinearProgress className=\"progress-bar\" variant=\"determinate\" value={\n    100.0 * (progress === null ? 0 : progress + 1) / max\n  }/>;\n}","import {\n  BoardProps \n} from 'boardgame.io/react'\n\nimport {\n  Button,\n  Grid,\n} from '@material-ui/core';\n\nimport CardSequence from './CardSequence';\nimport SampleGrid from './SampleGrid';\nimport { GameState, StepState } from '../Types';\nimport { CheckLevelComplete } from '../Game';\nimport { range } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { DEFAULT_BPM, SECONDS_PER_STEP, STEP_COUNT, TRACK_BARS } from '../Constants';\nimport * as Tone from 'tone';\nimport { Time } from 'tone/build/esm/core/type/Units';\nimport LevelDescription from './LevelDescription';\nimport TrackProgress from './TrackProgress';\nimport { Player, Sequence } from 'tone';\n\nfunction ContinueButton({G, onClick} : {G: GameState, onClick: any} ) {\n  const enabled = CheckLevelComplete(G);\n  return <Button variant=\"contained\" onClick={onClick} disabled={!enabled}>\n   Next Day \n  </Button>;\n}\nconst keyMapper: { [key: string]: string } = {\n  bd: \"e4\",\n  ch: \"d4\",\n  sd: \"c4\",\n};\n\nconst sampler = new Tone.Sampler({\n  urls: {\n    // Bass Drum\n    e4: \"BD/E808_BD[short]-03.wav\",\n    // Closed Hat\n    d4: \"CH/E808_CH-06.wav\",\n    // Snare\n    c4: \"SD/E808_SD-03.wav\",\n  },\n  baseUrl: process.env.PUBLIC_URL + \"/samples/808/\"\n}).toDestination();\n\nexport default function Board({\n  G, ctx, moves  \n} : React.HTMLAttributes<HTMLElement> & BoardProps<GameState>)\n{\n  const {\n    title,\n    levelTrack,\n    playerParts,\n    targetParts,\n    playerHand,\n    playerSchedule,\n  } = G;\n  useEffect(() => {\n    Tone.Transport.bpm.value = DEFAULT_BPM;\n    Tone.start();\n    Tone.Transport.start();\n    return () => {\n      Tone.Transport.stop();\n    }\n  }, []);\n  const [currentlyPlayingStep, setCurrentlyPlayingStep] = useState<number | null>(null);\n  const [lastPlayedStep, setLastPlayedStep] = useState<number | null>(null);\n  const [currentTime, setCurrentTime] = useState<Time | undefined>(undefined);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [playerActive, setPlayerActive] = useState(true);\n  const [player, setPlayer] = useState<Player | null>(null);\n  const [sequence, setSequence] = useState<Sequence | null>(null);\n  useEffect(() => {\n    if (lastPlayedStep === currentlyPlayingStep) {\n      return;\n    }\n    if(typeof currentTime === 'undefined') {\n      return;\n    }\n    if (currentlyPlayingStep === null) {\n      return;\n    }\n    if (!isPlaying) {\n      return;\n    }\n    setLastPlayedStep(currentlyPlayingStep);\n    // stepIndex selects from our step sequencer, which is only 16th notes on repeat.\n    const stepIndex = currentlyPlayingStep % STEP_COUNT;\n    const parts = playerActive ? playerParts : targetParts;\n    for (let part of parts) {\n      if (part.steps[stepIndex] !== StepState.OFF) {\n        sampler.triggerAttackRelease(keyMapper[part.sample], \"16n\", currentTime, part.steps[stepIndex] / 2);\n      }\n    }\n    if (currentlyPlayingStep >= (STEP_COUNT * TRACK_BARS) - 1) {\n      setIsPlaying(false);\n      setCurrentTime(undefined);\n      setCurrentlyPlayingStep(null);\n      setPlayer(null);\n      setSequence(null);\n      return;\n    }\n  }, [currentTime, playerParts, targetParts, currentlyPlayingStep, lastPlayedStep, playerActive, isPlaying])\n  const onStep = (time: Time, stepId: number) => {\n    // This is a bit subtle: time has to be set before step.\n    // Only step triggers the sample side effect.\n    setCurrentTime(time);\n    setCurrentlyPlayingStep(stepId);\n  };\n  const play = () => {\n    if (isPlaying) {\n      return;\n    }\n    const sequencer = new Tone.Sequence(\n      onStep,\n      range(STEP_COUNT * TRACK_BARS),\n      \"16n\"\n    );\n    setSequence(sequencer);\n    const player = new Tone.Player(\n      levelTrack,\n      () => {\n        setIsPlaying(true);\n        Tone.start();\n        sequencer.loop = false;\n        sequencer.start();\n      }\n    ).toDestination();\n    setPlayer(player);\n    player.loop = false;\n    player.autostart = true;\n  };\n  const stop = () => {\n    if (!isPlaying) {\n      return;\n    }\n    setCurrentTime(undefined);\n    setLastPlayedStep(null);\n    setCurrentlyPlayingStep(null);\n    sequence?.stop();\n    setSequence(null);\n    player?.stop();\n    setPlayer(null);\n    setIsPlaying(false);\n  }\n  return <Grid container className=\"game-board\" alignItems=\"center\" justify=\"center\">\n    <LevelDescription\n      turn={ctx.turn}\n      onDismiss={() => {\n        // On a new level, play the target first.\n        setPlayerActive(false);\n        play();\n      }}\n    />\n    <Grid item xs={3} className=\"pc-area portrait-area\" key=\"pc-area\">\n      <div className=\"pc portrait\">&nbsp;</div>\n    </Grid>\n    <Grid item xs={6} className=\"parts-area\">\n      <Grid container className=\"parts\" justify=\"center\" key=\"parts\">\n        <Grid item xs={12} key=\"title\">\n          <h1>{ctx.turn}: {title}</h1>\n        </Grid>\n        <Grid item xs={1} key=\"time-elapsed\">\n          {isPlaying && \n            <span>\n              {((currentlyPlayingStep ?? 0)  * SECONDS_PER_STEP).toFixed(1)}\n            </span>\n          }\n        </Grid>\n        <Grid item xs={10} key=\"progress\">\n          <TrackProgress progress={currentlyPlayingStep} max={TRACK_BARS * STEP_COUNT} />\n        </Grid>\n        <Grid item xs={1} key=\"time-remaining\">\n          {isPlaying && \n            <span>\n              {(((TRACK_BARS * STEP_COUNT) - (currentlyPlayingStep ?? 0))  * SECONDS_PER_STEP).toFixed(1)}\n            </span>\n          }\n        </Grid>\n        <Grid item xs={12} className=\"start-stop\" key=\"start-stop\">\n          <Button\n            className={isPlaying ? \"stop\" : \"play\"}\n            onClick={isPlaying ? stop : play}\n          >\n            &nbsp;\n          </Button>\n        </Grid>\n        <Grid item xs={12} className=\"current-parts\">\n          { playerActive ? \n            <SampleGrid\n              parts={playerParts}\n              currentlyPlayingStep={playerActive ? currentlyPlayingStep : null}\n              className=\"sampler player\"\n            />\n            :\n            <SampleGrid\n              parts={targetParts}\n              currentlyPlayingStep={!playerActive ? currentlyPlayingStep : null}\n              className=\"sampler player\"\n            />\n          }\n          <Button\n            variant=\"contained\"\n            disabled={playerActive}\n            className={playerActive ? \"selected\" : \"\"}\n            onClick={() => {\n              setPlayerActive(true);\n              play();\n            }}\n          >\n            Current\n          </Button>\n          &nbsp;\n          <Button\n            variant=\"contained\"\n            disabled={!playerActive}\n            className={!playerActive ? \"selected\" : \"\"}\n            onClick={() => {\n              setPlayerActive(false);\n              play();\n            }}\n          >\n            Target\n          </Button>\n        </Grid>\n        <Grid item xs={12} className=\"dialogue\">\n          <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n        </Grid>\n      </Grid>\n    </Grid>\n    <Grid item xs={3} className=\"npc-area portrait-area\" key=\"npc-area\">\n      <div className=\"npc portrait\">&nbsp;</div>\n    </Grid>\n    <Grid item xs={12} key=\"break\"/>\n    <Grid item xs={5} className=\"hand-area\" key=\"hand-area\">\n      <h3>To-Do</h3>\n      <CardSequence\n        cards={playerHand}\n        onClickCard={(i: number) => {\n          moves.playCard(i);\n          play();\n        }}\n        buttonLabel=\"Enqueue\"\n        className=\"hand\"\n        unremovable={0}\n      />\n    </Grid>\n    <Grid item xs={2} className=\"next-day\" key=\"next-day\">\n      <Button variant=\"contained\" onClick={moves.clearSchedule}>Clear</Button>\n      <hr/>\n      <ContinueButton G={G} onClick={\n        () => {\n          moves.commitSchedule();\n          stop();\n        }\n      }/>\n    </Grid>\n    <Grid item xs={5} className=\"schedule-area\" key=\"schedule-area\">\n      <h3>Schedule</h3>\n      <CardSequence\n        cards={playerSchedule}\n        onClickCard={(i: number) => {\n          moves.removeCard(i);\n          play();\n        }}\n        buttonLabel=\"Remove\"\n        className=\"schedule\"\n        unremovable={G.startingSchedule.length}\n      />\n    </Grid>\n  </Grid>;\n}","import './App.css';\nimport { Client } from 'boardgame.io/react';\nimport Board from './component/Board';\nimport { MyGame } from './Game';\n\nconst App = Client({ game: MyGame, board: Board, numPlayers: 1, debug: false });\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}