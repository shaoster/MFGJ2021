{"version":3,"sources":["Types.ts","Constants.ts","Cards.ts","component/SampleGrid.tsx","component/CardSequence.tsx","Puzzles.ts","Game.ts","component/Board.tsx","App.js","reportWebVitals.js","index.js"],"names":["StepState","StepAction","STEP_COUNT","GRID_WIDTH","ApplyPatternToPart","pattern","part","updatedSteps","steps","entries","stepIndex","stepAction","currentStep","INCREMENT","OFF","ON","ACCENT","DECREMENT","MAX","ZERO","SHIFT_UP","SHIFT_RIGHT","SHIFT_DOWN","SHIFT_LEFT","processStep","CardImpl","flavor","title","description","image","sampleTarget","this","G","playerParts","sample","console","log","Cards","layFlat","IGNORE","fold","drop","mop","sweep","vacuum","feast","bus","rinse","scour","dry","laundry","floor","dishes","PatternRows","classSequence","chunkedGrid","chunk","map","row","rowId","className","cellClass","colId","Paper","variant","PartGrid","parts","currentlyPlayingStep","remainingProps","useState","tabIndex","setTabIndex","cellClasses","take","step","index","key","AppBar","position","Tabs","value","onChange","_","newValue","p","Tab","label","style","minWidth","keyMapper","bd","ch","sd","sampler","Tone","urls","e4","d4","c4","baseUrl","process","toDestination","SampleGrid","useEffect","bpm","start","stop","setCurrentlyPlayingStep","isPlaying","setIsPlaying","play","a","sequencer","time","stepId","triggerAttackRelease","range","loop","Button","onClick","disabled","ActionCard","cardId","cardIndex","buttonLabel","onClickCard","card","maybeClassSequence","Card","CardContent","CardActions","EmptyCardSlot","CardSequence","cards","unremovable","Grid","container","undefined","times","length","Puzzles","targetParts","startingHand","playerSchedule","SetupTurn","turn","puzzle","Array","from","newG","levelTitle","playerHand","activePart","forEach","playCard","CheckLevelComplete","targetPartIndex","targetPart","currentPart","i","MyGame","moves","ctx","handSlot","splice","push","removeCard","playerScheduleSlot","INVALID_MOVE","cleanState","removedCardId","replayedCardIndex","replayedCardId","replayedCard","commitSchedule","events","endTurn","onBegin","ContinueButton","enabled","App","Client","game","board","item","xs","numPlayers","debug","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8083d64f.chunk.js","sourcesContent":["/**\n * This represents the top-level data model of the game.\n * Any concept of global consequence should be declared (but not implemented) here.\n * Because the compiler can traverse the dependency graph just fine, the order of declaration\n * should be for human consumption.\n * Thus, top level concepts are presented first, and their dependencies are declared later.\n */\n\n\n////////////////////////////////\n// Puzzle Configuration\n\nexport interface Puzzle {\n  title: string;\n  // The musical composition the player is aiming to replicate.\n  targetParts: Array<Part>;\n  // The cards you start with in your hand.\n  startingHand: Array<CardId>;\n  // Any initial state that cannot be removed.\n  playerSchedule?: Array<CardId>;\n}\n\nexport interface Part {\n  sample: string;\n  steps: StepSequence;\n};\n\nexport type StepSequence = Array<StepState>;\n\nexport enum StepState {\n  OFF = 0,\n  ON = 1,\n  ACCENT = 2,\n};\n\n//////////////////////////////////////////////////////////\n// Gameplay State (i.e. when trying to solve the puzzle)\n\n// Keep this serializable for easy state management.\nexport interface GameState {\n  levelTitle: string;\n  playerParts: Array<Part>;\n  targetParts: Array<Part>;\n  // The set of cards the player can choose from.\n  playerHand: Array<CardId>;\n  // The sequence of cards the player has chosen to play.\n  playerSchedule: Array<CardId>;\n  // The number of unremovable cards at the beginning of the schedule.\n  unremovable: number;\n}\n\n// The card identifier is just a string for now. This keeps things serializable.\nexport type CardId = string;\n\n//////////////////////////////////////////////////////////\n// Card Concepts\n\nexport interface CardFlavor {\n  title: string;\n  description: string;\n  image?: string;\n};\n\nexport interface Card extends CardFlavor {\n  // Pattern cards have special UI considerations.\n  sampleTarget?: string;\n  pattern?: Pattern;\n  playCard: CardAction;\n};\n\nexport type Pattern = Array<StepAction>;\n\nexport enum StepAction {\n  INCREMENT,\n  DECREMENT,\n  ZERO,\n  MAX,\n  SHIFT_UP,\n  SHIFT_RIGHT,\n  SHIFT_DOWN,\n  SHIFT_LEFT,\n  IGNORE,\n};\n\nexport type CardAction = (G: GameState) => void;","export const GRID_WIDTH: number = 4;\nexport const GRID_HEIGHT: number = 4;\nexport const STEP_COUNT: number = GRID_WIDTH * GRID_HEIGHT;\nexport const DEFAULT_BPM: number = 79;\nexport const MAX_HAND_SIZE: number = 6;\n","import { GRID_WIDTH, STEP_COUNT } from \"./Constants\";\nimport { Card, CardFlavor, GameState, Part, Pattern, StepAction, StepState } from \"./Types\";\n\n// Separate from CardImpl, for UI/preview purposes.\nexport const ApplyPatternToPart: (pattern: Pattern, part: Part) => void = (pattern, part) => {\n  const updatedSteps = [...part.steps];\n  for (const [stepIndex, stepAction] of pattern.entries()) {\n    const processStep: () => StepState = () => {\n      const currentStep = part.steps[stepIndex];\n      switch (stepAction) {\n        case StepAction.INCREMENT:\n          if (currentStep === StepState.OFF) {\n            return StepState.ON;\n          } else {\n            return StepState.ACCENT;\n          }\n        case StepAction.DECREMENT:\n          if (currentStep === StepState.ACCENT) {\n            return StepState.ON;\n          } else {\n            return StepState.OFF;\n          }\n        case StepAction.MAX:\n          return StepState.ACCENT;\n        case StepAction.ZERO:\n          return StepState.OFF;\n        case StepAction.SHIFT_UP:\n          if (stepIndex + GRID_WIDTH > STEP_COUNT) {\n            return StepState.OFF\n          }\n          return part.steps[stepIndex + GRID_WIDTH];\n        case StepAction.SHIFT_RIGHT:\n          if ((stepIndex % GRID_WIDTH) === 0) {\n            return StepState.OFF;\n          }\n          return part.steps[stepIndex - 1];\n        case StepAction.SHIFT_DOWN:\n          if (stepIndex - GRID_WIDTH < 0) {\n            return StepState.OFF;\n          }\n          return part.steps[stepIndex - GRID_WIDTH];\n        case StepAction.SHIFT_LEFT:\n          if ((stepIndex % GRID_WIDTH) + 1 === GRID_WIDTH) {\n            return StepState.OFF;\n          }\n          return part.steps[stepIndex + 1];\n        default:\n          return currentStep;\n      }\n    }\n    updatedSteps[stepIndex] = processStep();\n  }\n  part.steps = updatedSteps;\n}\n\nclass CardImpl implements Card {\n  title: string;\n  description: string;\n  image?: string;\n  sampleTarget?: string;\n  pattern?: Pattern;\n\n  constructor(flavor: CardFlavor, pattern?: Pattern, part?: string) {\n    this.title = flavor.title;\n    this.description = flavor.description;\n    this.image = flavor.image;\n    this.pattern = pattern;\n    this.sampleTarget = part;\n  }\n\n  playCard(G: GameState) {\n    for (const part of G.playerParts) {\n      if (part.sample !== this.sampleTarget) {\n        continue;\n      }\n      console.log(this.pattern);\n      if (this.pattern) {\n        ApplyPatternToPart(this.pattern, part);\n      }\n    }\n  }\n}\n\nconst Cards : {[key: string]: Card} = {\n  layFlat: new CardImpl(\n    {\n      title: \"Lay Flat\",\n      description: \"Lay your shirt flat on your bed. The foundation of any laundry folding routine.\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"sd\"\n  ),\n  fold: new CardImpl(\n    {\n      title: \"Fold\",\n      description: \"Fold your shirt. Add some complexity! (Assuming you have something to start with...)\"\n    },\n    [\n      StepAction.DECREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.DECREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"sd\"\n  ),\n  drop: new CardImpl(\n    {\n      title: \"Drop\",\n      description: \"Oops! You dropped your [?] all over the floor. What a mess...\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT,\n      StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT,\n      StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT,\n      StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT,\n    ],\n    \"bd\"\n  ),\n  mop: new CardImpl(\n    {\n      title: \"Mop\",\n      description: \"Mop the floor. This mess might be a bit too much to soak up though.\"\n    },\n    [\n      StepAction.DECREMENT, StepAction.DECREMENT, StepAction.IGNORE, StepAction.DECREMENT,\n      StepAction.DECREMENT, StepAction.DECREMENT, StepAction.IGNORE, StepAction.DECREMENT,\n      StepAction.DECREMENT, StepAction.DECREMENT, StepAction.IGNORE, StepAction.DECREMENT,\n      StepAction.DECREMENT, StepAction.DECREMENT, StepAction.IGNORE, StepAction.DECREMENT,\n    ],\n    \"bd\"\n  ),\n  sweep: new CardImpl(\n    {\n      title: \"Sweep\",\n      description: \"Sweep the floor. It's a bit hard to reach that corner.\"\n    },\n    [\n      StepAction.ZERO, StepAction.SHIFT_RIGHT, StepAction.SHIFT_RIGHT, StepAction.SHIFT_RIGHT,\n      StepAction.ZERO, StepAction.SHIFT_RIGHT, StepAction.SHIFT_RIGHT, StepAction.SHIFT_RIGHT,\n      StepAction.ZERO, StepAction.SHIFT_RIGHT, StepAction.SHIFT_RIGHT, StepAction.SHIFT_RIGHT,\n      StepAction.ZERO, StepAction.SHIFT_RIGHT, StepAction.SHIFT_RIGHT, StepAction.SHIFT_RIGHT,\n    ],\n    \"bd\"\n  ),\n  vacuum: new CardImpl(\n    {\n      title: \"Vacuum\",\n      description: \"Suck up whatever is left. (Maybe leave 4 [?]s on the floor?)\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT,\n    ],\n    \"bd\"\n  ),\n  feast: new CardImpl(\n    {\n      title: \"Feast\",\n      description: \"What a delicious meal! What are we going to do about all the dishes?\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT,\n      StepAction.IGNORE, StepAction.INCREMENT, StepAction.IGNORE, StepAction.INCREMENT,\n      StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT, StepAction.INCREMENT,\n      StepAction.IGNORE, StepAction.INCREMENT, StepAction.IGNORE, StepAction.INCREMENT,\n    ],\n    \"ch\"\n  ),\n  bus: new CardImpl(\n    {\n      title: \"Bus\",\n      description: \"What a delicious meal! What are we going to do about all the dishes?\"\n    },\n    [\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_LEFT, StepAction.SHIFT_LEFT, StepAction.ZERO,\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_LEFT, StepAction.SHIFT_LEFT, StepAction.ZERO,\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_LEFT, StepAction.SHIFT_LEFT, StepAction.ZERO,\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_LEFT, StepAction.SHIFT_LEFT, StepAction.ZERO,\n    ],\n    \"ch\"\n  ),\n  rinse: new CardImpl(\n    {\n      title: \"Rinse\",\n      description: \"Rinse the dishes. This will make them easier to clean.\"\n    },\n    [\n      StepAction.IGNORE, StepAction.ZERO, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.ZERO, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.ZERO, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.ZERO, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"ch\"\n  ),\n  scour: new CardImpl(\n    {\n      title: \"Scour\",\n      description: \"Scour the dishes. Really put your back into it.\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.INCREMENT, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.INCREMENT, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.INCREMENT, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.INCREMENT, StepAction.IGNORE,\n    ],\n    \"ch\"\n  ),\n  dry: new CardImpl(\n    {\n      title: \"Dry\",\n      description: \"Let the dishes dry. What a lovely sight!\"\n    },\n    [\n      StepAction.DECREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.DECREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.DECREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.DECREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"ch\"\n  ),\n  laundry: new CardImpl(\n    {\n      title: \"Laundry\",\n      description: \"Do the laundry. You know how!\"\n    },\n    [\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"sd\"\n  ),\n  floor: new CardImpl(\n    {\n      title: \"Floor\",\n      description: \"Clean the floor. You know how!\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"bd\"\n  ),\n  dishes: new CardImpl(\n    {\n      title: \"Dishes\",\n      description: \"Do the dishes. You know how!\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.MAX, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.MAX, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.MAX, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.MAX, StepAction.IGNORE,\n    ],\n    \"ch\"\n  )\n\n\n\n};\n\nexport default Cards;","import React, { useEffect, useState } from 'react';\n\nimport * as Tone from \"tone\";\n\nimport {\n  AppBar,\n  Button,\n  Paper,\n  Tab,\n  Tabs,\n} from '@material-ui/core';\n\nimport {\n  chunk,\n  range,\n  take,\n} from 'lodash';\n\nimport {\n  DEFAULT_BPM,\n  GRID_WIDTH,\n  STEP_COUNT,\n} from '../Constants';\nimport { Part, StepSequence, StepState } from '../Types';\n\nexport function PatternRows(\n  { classSequence, ...remainingProps } : React.HTMLAttributes<HTMLElement> & {\n    classSequence: Array<string>,\n  }\n) {\n  const chunkedGrid: Array<Array<string>> = chunk(classSequence, GRID_WIDTH);\n  return <>\n    {\n    chunkedGrid.map((row: Array<string>, rowId: number) => (\n      <tr key={\"row \" + rowId} className=\"row\">\n      {\n        row.map((cellClass: string, colId: number) => {\n          return (\n            <td key={\"col \" + colId} className={cellClass}>\n              <Paper className=\"step\" variant=\"outlined\"/>\n            </td>\n          );\n        })\n      }\n      </tr>\n    ))\n    }\n  </>;\n};\n\nfunction PartGrid(\n  { parts, currentlyPlayingStep, ...remainingProps }: React.HTMLAttributes<HTMLElement> & {\n    parts: Array<Part>, currentlyPlayingStep: number | null\n  }\n)\n{\n  const [tabIndex, setTabIndex] = useState(0);\n  const {\n    steps\n  } = parts[tabIndex];\n  const truncatedSteps: StepSequence = take(steps, STEP_COUNT);\n  const cellClasses: Array<string> = truncatedSteps.map((step: StepState, index: number) => {\n    let cellClass = \"cell \";\n    cellClass += StepState[step] as string + \" \";\n    if (index === currentlyPlayingStep) {\n      cellClass += \"playing\";\n    }\n    return cellClass;\n  });\n\n  return (\n    <table {...remainingProps} key={tabIndex}>\n      <caption>\n        <AppBar position=\"relative\">\n          <Tabs\n            variant=\"fullWidth\"\n            value={tabIndex}\n            onChange={(_, newValue: number) => setTabIndex(newValue)}\n            className=\"part-selector\"\n          >\n            {\n              parts.map((p: Part, index: number) =>\n                <Tab\n                  key={\"tab \" + index}\n                  label={p.sample}\n                  style={{ minWidth: 48 }}\n                />\n              )\n            }\n          </Tabs>\n        </AppBar>\n      </caption>\n      <tbody>\n        <PatternRows\n          classSequence={cellClasses}\n        />\n      </tbody>\n    </table>\n  );\n}\nconst keyMapper: { [key: string]: string } = {\n  bd: \"e4\",\n  ch: \"d4\",\n  sd: \"c4\",\n};\n\nconst sampler = new Tone.Sampler({\n  urls: {\n    // Bass Drum\n    e4: \"BD/E808_BD[short]-03.wav\",\n    // Closed Hat\n    d4: \"CH/E808_CH-06.wav\",\n    // Snare\n    c4: \"SD/E808_SD-03.wav\",\n  },\n  baseUrl: process.env.PUBLIC_URL + \"/samples/808/\"\n}).toDestination();\n\nexport default function SampleGrid(\n  { parts, ...remainingProps }: React.HTMLAttributes<HTMLElement> & { parts: Array<Part> }\n) {\n  useEffect(() => {\n    Tone.Transport.bpm.value = DEFAULT_BPM;\n    Tone.Transport.start();\n    return () => {\n      Tone.Transport.stop();\n    }\n  }, []);\n  const [currentlyPlayingStep, setCurrentlyPlayingStep] = useState<number | null>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const play = async () => {\n    const sequencer = new Tone.Sequence(\n      (time, stepId: number) => {\n        if (stepId >= STEP_COUNT) {\n          // Dummy fence-post.\n          setCurrentlyPlayingStep(null);\n          setIsPlaying(false);\n          return;\n        }\n        setCurrentlyPlayingStep(stepId);\n        for (let part of parts) {\n          if (part.steps[stepId] !== StepState.OFF) {\n            sampler.triggerAttackRelease(keyMapper[part.sample], \"16n\", time, part.steps[stepId] / 2);\n          }\n        }\n      },\n      range(STEP_COUNT + 1),\n      \"16n\"\n    );\n    setIsPlaying(true);\n    Tone.start();\n    sequencer.loop = false;\n    sequencer.start();\n  };\n  return <>\n    <PartGrid\n      parts={parts}\n      currentlyPlayingStep={currentlyPlayingStep}\n      {...remainingProps}\n    />\n  <Button variant=\"contained\" onClick={play} disabled={isPlaying}>{ isPlaying ? \"Playing\" : \"Play\" }</Button>\n  </>\n};","import { Button, Card, CardActions, CardContent, Grid } from \"@material-ui/core\";\nimport { times } from \"lodash\";\nimport { ReactElement } from \"react\";\n\nimport Cards from '../Cards';\nimport { MAX_HAND_SIZE } from \"../Constants\";\nimport { CardId, StepAction } from \"../Types\";\nimport { PatternRows } from \"./SampleGrid\";\n\nexport function ActionCard({\n  cardId, cardIndex, buttonLabel, onClickCard\n}: {cardId: CardId, cardIndex: number, buttonLabel: string, onClickCard: any} & React.HTMLAttributes<HTMLDivElement>)\n: ReactElement {\n  const card = Cards[cardId];\n  const maybeClassSequence = card.pattern?.map(\n    (stepAction: StepAction) => \"cell \" + StepAction[stepAction] as string\n  );\n  return <Card variant=\"outlined\" className=\"card\">\n    <CardContent>\n      <h2>{card.title}</h2>\n      {card.sampleTarget && <span>{card.sampleTarget}</span>}\n      {maybeClassSequence && \n        <table className=\"pattern\">\n          <PatternRows\n            classSequence={maybeClassSequence}\n          />\n        </table>\n      }\n      <p>{card.description}</p>\n    </CardContent> \n    <CardActions>\n      <Button\n        variant=\"contained\"\n        onClick={()=>onClickCard(cardIndex)}\n        disabled={!onClickCard}\n      >\n        {buttonLabel}\n      </Button>         \n    </CardActions>\n  </Card>;\n};\n\nexport function EmptyCardSlot(): ReactElement {\n  return <Card variant=\"outlined\" className=\"card empty\">\n    <CardContent>\n      &nbsp;\n    </CardContent> \n\n  </Card>\n}\n\nexport default function CardSequence({\n  cards, buttonLabel, onClickCard, unremovable, ...remainingProps\n}: {\n  cards: Array<CardId>, buttonLabel: string, onClickCard: any, unremovable: number\n} & React.HTMLAttributes<HTMLDivElement>) {\n  return <Grid container {...remainingProps}>\n    {\n    cards.map((cardId: string, index: number) => \n      <ActionCard\n        cardId={cardId}\n        cardIndex={index}\n        buttonLabel={buttonLabel}\n        onClickCard={index >= unremovable ? onClickCard : undefined}\n        key={index}\n      />\n    )\n    }\n    {\n      times(MAX_HAND_SIZE - cards.length, () => null).map(\n        (_, index) => <EmptyCardSlot key={cards.length + index}/>\n      )\n    }\n  </Grid>;\n};","import { Puzzle, StepState } from \"./Types\";\n\nconst Puzzles: Array<Puzzle> = [\n  // 0\n  {\n    title: \"The Laundry\",\n    targetParts: [\n      {\n        sample: \"sd\",\n        steps: [\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n        ],\n      },\n    ],\n    startingHand: [\n      \"layFlat\",\n      \"fold\",\n    ]\n  },\n  // 1\n  {\n    title: \"The Floor\",\n    targetParts: [\n      {\n        sample: \"bd\",\n        steps: [\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n        ],\n      },\n    ],\n    startingHand:  [\n      \"mop\",\n      \"sweep\",\n      \"vacuum\",\n    ],\n    playerSchedule: [\n      \"drop\",\n    ]\n  },\n  // 2\n  {\n    title: \"The Dishes\",\n    targetParts: [\n      {\n        sample: \"ch\",\n        steps: [\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n        ],\n      },\n    ],\n    startingHand: [\n      \"bus\",\n      \"rinse\",\n      \"scour\",\n      \"dry\",\n    ],\n    playerSchedule: [\n      \"feast\",\n    ],\n  },\n  // 3\n  {\n    title: \"Putting it All Together\",\n    targetParts: [\n      {\n        sample: \"sd\",\n        steps: [\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n        ],\n      },\n      {\n        sample: \"bd\",\n        steps: [\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n        ],\n      },\n      {\n        sample: \"ch\",\n        steps: [\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n        ],\n      },\n    ],\n    startingHand: [\n      \"laundry\",\n      \"floor\",\n      \"dishes\",\n    ],\n  },\n];\n\nexport default Puzzles;","import { Ctx, Game } from 'boardgame.io';\n\nimport Puzzles from './Puzzles';\nimport Cards from './Cards';\n\nimport { STEP_COUNT } from './Constants';\nimport { GameState, Part, StepSequence, StepState } from './Types';\nimport { INVALID_MOVE } from 'boardgame.io/core';\n\n\nexport const FLIP:string = \"flip\";\n\nconst EmptyPart: () => StepSequence = () => Array.from({length: STEP_COUNT}, () => StepState.OFF);\n\nconst SetupTurn = (turn: number) => {\n  const puzzle = Puzzles[turn - 1];\n  const playerParts: Array<Part> = puzzle.targetParts.map(\n    (part: Part) => ({\n      sample: part.sample,\n      steps: EmptyPart()\n    })\n  );\n  const newG = {\n    // TBD: Start empty for now.\n    levelTitle: puzzle.title,\n    playerParts,\n    targetParts: [...puzzle.targetParts],\n    playerHand: [...puzzle.startingHand],\n    playerSchedule: [...(puzzle.playerSchedule ?? [])],\n    // Initially there are no active parts.\n    activePart: null,\n    unremovable: puzzle.playerSchedule?.length ?? 0,\n  };\n  // Apply any fixed cards.\n  (puzzle.playerSchedule ?? []).forEach((cardId) => Cards[cardId].playCard(newG))\n  return newG;\n}\n\nexport const CheckLevelComplete: (G: GameState) => boolean = (G: GameState) => {\n  for (const [targetPartIndex, targetPart] of G.targetParts.entries()) {\n    const currentPart = G.playerParts[targetPartIndex];\n    for (let i: number = 0; i < STEP_COUNT; i++) {\n      if (currentPart.steps[i] !== targetPart.steps[i]) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nexport const MyGame: Game = {\n  moves: {\n    playCard: (G: GameState, ctx: Ctx, handSlot: number) => {\n      const cardId = G.playerHand[handSlot];\n      const card = Cards[cardId];\n      card.playCard(G); \n      // Remove the played card.\n      G.playerHand.splice(handSlot, 1);\n      // Add it to the play stack.\n      G.playerSchedule.push(cardId);\n    },\n    removeCard: (G: GameState, ctx: Ctx, playerScheduleSlot: number) => {\n      if (playerScheduleSlot < G.unremovable) {\n        return INVALID_MOVE;\n      }\n      // Reset the turn and re-apply the cards in sequence. \n      const cleanState: GameState = SetupTurn(ctx.turn);\n      \n      // Add the removed card back to the hand.\n      cleanState.playerHand = [...G.playerHand];\n      const removedCardId = G.playerSchedule[playerScheduleSlot];\n      cleanState.playerHand.push(removedCardId);\n\n      // Re-play the remaining cards.\n      for (const [replayedCardIndex, replayedCardId] of G.playerSchedule.entries()) {\n        if (replayedCardIndex === playerScheduleSlot || replayedCardIndex < G.unremovable) {\n          // Ignore this removed card.\n          continue;\n        }\n        const replayedCard = Cards[replayedCardId];\n        console.log(cleanState);\n        replayedCard.playCard(cleanState);\n        console.log(cleanState);\n        cleanState.playerSchedule.push(replayedCardId);\n      }\n      return cleanState;\n    },\n    commitSchedule: (G: GameState, ctx: Ctx) => {\n      if (CheckLevelComplete(G)) {\n        ctx.events?.endTurn?.();\n      }\n    },\n  },\n  turn: {\n    onBegin: (G: GameState, ctx: Ctx) => SetupTurn(ctx.turn)\n  }\n};","import {\n  BoardProps \n} from 'boardgame.io/react'\n\nimport {\n  Button,\n  Grid,\n} from '@material-ui/core';\n\nimport CardSequence from './CardSequence';\nimport SampleGrid from './SampleGrid';\nimport { GameState } from '../Types';\nimport { CheckLevelComplete } from '../Game';\n\nfunction ContinueButton({G, onClick} : {G: GameState, onClick: any} ) {\n  const enabled = CheckLevelComplete(G);\n  return <Button variant=\"contained\" onClick={onClick} disabled={!enabled}>\n   Next Day \n  </Button>;\n}\n\nexport default function Board({G, ctx, moves}: BoardProps<GameState>) {\n  const {\n    playerParts,\n    targetParts,\n    unremovable,\n  } = G;\n  return <Grid container>\n    <Grid item xs={12} className=\"level-title\">\n      <h1>{ctx.turn}: {G.levelTitle}</h1>\n    </Grid>\n    <Grid item xs={1} className=\"current-parts\">\n      <h1>Current</h1>\n      <SampleGrid\n        parts={playerParts}\n        className=\"sampler player\"\n      />\n    </Grid>\n    <Grid item xs={1} className=\"target-parts\">\n      <h1>Goal</h1>\n      <SampleGrid\n        parts={targetParts}\n        className=\"sampler goal\"\n      />\n    </Grid>\n    <Grid item xs={1} className=\"continue\">\n    </Grid>\n    <Grid item xs={9}/>\n    <Grid item xs={12} className=\"hand-area\">\n      <h1>Hand</h1>\n      <CardSequence\n        cards={G.playerHand}\n        onClickCard={moves.playCard}\n        buttonLabel=\"Enqueue\"\n        className=\"hand\"\n        unremovable={0}\n      />\n    </Grid>\n    <Grid item xs={12} className=\"schedule-area\">\n      <h1>Schedule &nbsp; <ContinueButton G={G} onClick={moves.commitSchedule}/></h1>\n      <CardSequence\n        cards={G.playerSchedule}\n        onClickCard={moves.removeCard}\n        buttonLabel=\"Remove\"\n        className=\"schedule\"\n        unremovable={unremovable}\n      />\n    </Grid>\n  </Grid>;\n};","import './App.css';\nimport { Client } from 'boardgame.io/react';\nimport Board from './component/Board';\nimport { MyGame } from './Game';\n\nconst App = Client({ game: MyGame, board: Board, numPlayers: 1, debug: true});\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}