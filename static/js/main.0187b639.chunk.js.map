{"version":3,"sources":["Types.ts","Constants.ts","Cards.ts","component/SampleGrid.tsx","component/CardSequence.tsx","Puzzles.ts","component/LevelDescription.tsx","component/TrackProgress.tsx","component/Board.tsx","Game.ts","App.js","reportWebVitals.js","index.js"],"names":["StepState","StepAction","STEP_COUNT","GRID_WIDTH","SECONDS_PER_STEP","ApplyPatternToPart","pattern","part","updatedSteps","steps","entries","stepIndex","stepAction","currentStep","INCREMENT","OFF","ON","ACCENT","DECREMENT","MAX","ZERO","SHIFT_UP","SHIFT_RIGHT","SHIFT_DOWN","SHIFT_LEFT","processStep","CardImpl","flavor","title","description","image","sampleTarget","this","G","playerParts","sample","Cards","makeBed","IGNORE","cleanChest","layFlat","fold","putAway","drop","mop","sweep","vacuum","emptyTrash","feast","rearrange","bus","rinse","scour","dry","laundry","floor","dishes","PatternRows","classSequence","chunkedGrid","chunk","map","row","rowId","className","cellClass","colId","Paper","variant","PartGrid","parts","currentlyPlayingStep","remainingProps","useState","tabIndex","setTabIndex","cellClasses","take","step","index","key","Tabs","value","onChange","_","newValue","p","Tab","label","style","minWidth","SampleGrid","ActionCard","cardId","cardIndex","buttonLabel","onClickCard","onClickEnabled","viewCard","isSelected","card","maybeClassSequence","Card","onClick","CardContent","CardActions","Button","disabled","BASIC_CARD_CLASSES","range","i","CardSequence","cards","unremovable","selectedCard","setSelectedCard","cardClasses","setCardClasses","length","lastCardCount","setLastCardCount","useEffect","newClasses","newClass","clickCard","TransitionGroup","component","CSSTransition","exit","classNames","timeout","zIndex","newCard","LT_PREFIX","process","Puzzles","levelTrack","overrideBPM","targetParts","startingHand","startingSchedule","hints","overrideTrackBars","TurnDescription","turn","onDismiss","lastAcknowledgedTurn","setLastAcknowledgedTurn","show","setShow","onClose","puzzle","Modal","open","descriptionLine","TrackProgress","progress","max","LinearProgress","ContinueButton","enabled","hasClearedLevel","keyMapper","cy","bd","ch","sd","sampler","Tone","urls","f4","e4","d4","c4","baseUrl","toDestination","SetupTurn","oldG","Array","from","newG","playerHand","playerSchedule","forEach","playCard","CheckLevelComplete","targetPartIndex","targetPart","currentPart","MyGame","moves","ctx","handSlot","INVALID_MOVE","splice","push","removeCard","playerScheduleSlot","removedCardId","cleanState","replayedCardIndex","replayedCardId","clearSchedule","commitSchedule","events","endTurn","onBegin","App","Client","game","board","trackBars","bpm","start","stop","npcDialog","setNpcDialog","setCurrentlyPlayingStep","lastPlayedStep","setLastPlayedStep","undefined","currentTime","setCurrentTime","isPlaying","setIsPlaying","playerActive","setPlayerActive","player","setPlayer","sequence","setSequence","onStep","time","stepId","play","sequencer","loop","autostart","useCallback","triggerAttackRelease","Grid","container","alignItems","justify","item","xs","toFixed","SwitchTransition","line","onViewCard","numPlayers","debug","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0187b639.chunk.js","sourcesContent":["/**\n * This represents the top-level data model of the game.\n * Any concept of global consequence should be declared (but not implemented) here.\n * Because the compiler can traverse the dependency graph just fine, the order of declaration\n * should be for human consumption.\n * Thus, top level concepts are presented first, and their dependencies are declared later.\n */\n\n\n////////////////////////////////\n// Puzzle Configuration\n\nexport interface Puzzle {\n  title: string;\n  description: Array<string>;\n  levelTrack: string;\n  // Override the usually constant length of the track.\n  overrideTrackBars?: number;\n  // Override the usually constant bpm.\n  overrideBPM?: number;\n  // The musical composition the player is aiming to replicate.\n  targetParts: Array<Part>;\n  // The cards you start with in your hand.\n  startingHand: Array<CardId>;\n  // Any initial state that cannot be removed.\n  startingSchedule: Array<CardId>;\n  // Any dialog prior to cards being scheduled.\n  hints?: Array<string>;\n}\n\nexport interface Part {\n  sample: string;\n  steps: StepSequence;\n};\n\nexport type StepSequence = Array<StepState>;\n\nexport enum StepState {\n  OFF = 0,\n  ON = 1,\n  ACCENT = 2,\n};\n\n//////////////////////////////////////////////////////////\n// Gameplay State (i.e. when trying to solve the puzzle)\n\n// Keep this serializable for easy state management.\nexport interface GameState extends Puzzle {\n  // The player's current parts.\n  playerParts: Array<Part>;\n  // The player's current hand.\n  playerHand: Array<CardId>;\n  // The player's current schedule.\n  playerSchedule: Array<CardId>;\n  // Whether the player has unlocked the next level.\n  hasClearedLevel: boolean;\n}\n\n// The card identifier is just a string for now. This keeps things serializable.\nexport type CardId = string;\n\n//////////////////////////////////////////////////////////\n// Card Concepts\n\nexport interface CardFlavor {\n  title: string;\n  description: string;\n  image?: string;\n};\n\nexport interface Card extends CardFlavor {\n  // Pattern cards have special UI considerations.\n  sampleTarget?: string;\n  pattern?: Pattern;\n  playCard: CardAction;\n};\n\nexport type Pattern = Array<StepAction>;\n\nexport enum StepAction {\n  INCREMENT,\n  DECREMENT,\n  ZERO,\n  MAX,\n  SHIFT_UP,\n  SHIFT_RIGHT,\n  SHIFT_DOWN,\n  SHIFT_LEFT,\n  IGNORE,\n};\n\nexport type CardAction = (G: GameState) => void;","export const GRID_WIDTH: number = 4;\nexport const GRID_HEIGHT: number = 4;\nexport const STEP_COUNT: number = GRID_WIDTH * GRID_HEIGHT;\nexport const DEFAULT_BPM: number = 88;\nexport const DEFAULT_TRACK_BARS: number = 4;\nexport const MAX_HAND_SIZE: number = 6;\nexport const SECONDS_PER_STEP: number = 60.0 / (GRID_WIDTH * DEFAULT_BPM);","import { GRID_WIDTH, STEP_COUNT } from \"./Constants\";\nimport { Card, CardFlavor, GameState, Part, Pattern, StepAction, StepState } from \"./Types\";\n\n// Separate from CardImpl, for UI/preview purposes.\nexport const ApplyPatternToPart: (pattern: Pattern, part: Part) => void = (pattern, part) => {\n  const updatedSteps = [...part.steps];\n  for (const [stepIndex, stepAction] of pattern.entries()) {\n    const processStep: () => StepState = () => {\n      const currentStep = part.steps[stepIndex];\n      switch (stepAction) {\n        case StepAction.INCREMENT:\n          if (currentStep === StepState.OFF) {\n            return StepState.ON;\n          } else {\n            return StepState.ACCENT;\n          }\n        case StepAction.DECREMENT:\n          if (currentStep === StepState.ACCENT) {\n            return StepState.ON;\n          } else {\n            return StepState.OFF;\n          }\n        case StepAction.MAX:\n          return StepState.ACCENT;\n        case StepAction.ZERO:\n          return StepState.OFF;\n        case StepAction.SHIFT_UP:\n          if (stepIndex + GRID_WIDTH > STEP_COUNT) {\n            return StepState.OFF\n          }\n          return part.steps[stepIndex + GRID_WIDTH];\n        case StepAction.SHIFT_RIGHT:\n          if ((stepIndex % GRID_WIDTH) === 0) {\n            return StepState.OFF;\n          }\n          return part.steps[stepIndex - 1];\n        case StepAction.SHIFT_DOWN:\n          if (stepIndex - GRID_WIDTH < 0) {\n            return StepState.OFF;\n          }\n          return part.steps[stepIndex - GRID_WIDTH];\n        case StepAction.SHIFT_LEFT:\n          if ((stepIndex % GRID_WIDTH) + 1 === GRID_WIDTH) {\n            return StepState.OFF;\n          }\n          return part.steps[stepIndex + 1];\n        default:\n          return currentStep;\n      }\n    }\n    updatedSteps[stepIndex] = processStep();\n  }\n  part.steps = updatedSteps;\n}\n\nclass CardImpl implements Card {\n  title: string;\n  description: string;\n  image?: string;\n  sampleTarget?: string;\n  pattern?: Pattern;\n\n  constructor(flavor: CardFlavor, pattern?: Pattern, part?: string) {\n    this.title = flavor.title;\n    this.description = flavor.description;\n    this.image = flavor.image;\n    this.pattern = pattern;\n    this.sampleTarget = part;\n  }\n\n  playCard(G: GameState) {\n    for (const part of G.playerParts) {\n      if (part.sample !== this.sampleTarget) {\n        continue;\n      }\n      if (this.pattern) {\n        ApplyPatternToPart(this.pattern, part);\n      }\n    }\n  }\n}\n\nconst Cards : {[key: string]: Card} = {\n  makeBed: new CardImpl(\n    {\n      title: \"Make Bed\",\n      description: \"If you make your bed every morning, you will have accomplished the first task of the day.\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"bd\"\n  ),\n  cleanChest: new CardImpl(\n    {\n      title: \"Clean Chest\",\n      description: \"Next to the bed is a small chest for your personal belongings. It's a bit dusty.\"\n    },\n    [\n      StepAction.DECREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"bd\"\n  ),\n  layFlat: new CardImpl(\n    {\n      title: \"Lay Flat\",\n      description: \"Lay your shirt flat on your bed. The foundation of any laundry folding routine.\"\n    },\n    [\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"sd\"\n  ),\n  fold: new CardImpl(\n    {\n      title: \"Fold\",\n      description: \"Fold your shirt. Add some complexity! (Assuming you have something to start with...)\"\n    },\n    [\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"sd\"\n  ),\n  putAway: new CardImpl(\n    {\n      title: \"Put Away\",\n      description: \"Put away your freshly folded clothes.\"\n    },\n    [\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.MAX, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"sd\"\n  ),\n  drop: new CardImpl(\n    {\n      title: \"The Mess\",\n      description: \"Oops! You dropped your [?] all over the floor. What a mess...\"\n    },\n    [\n      StepAction.MAX, StepAction.MAX, StepAction.MAX, StepAction.MAX,\n      StepAction.MAX, StepAction.MAX, StepAction.MAX, StepAction.MAX,\n      StepAction.MAX, StepAction.MAX, StepAction.MAX, StepAction.MAX,\n      StepAction.MAX, StepAction.MAX, StepAction.MAX, StepAction.MAX,\n    ],\n    \"bd\"\n  ),\n  mop: new CardImpl(\n    {\n      title: \"Mop\",\n      description: \"Mop the floor. This mess might be a bit too much to soak up though.\"\n    },\n    [\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT, StepAction.DECREMENT,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT, StepAction.DECREMENT,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT, StepAction.DECREMENT,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT, StepAction.DECREMENT,\n    ],\n    \"bd\"\n  ),\n  sweep: new CardImpl(\n    {\n      title: \"Sweep\",\n      description: \"Sweep the floor. It's a bit hard to get the corners though..\"\n    },\n    [\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT, StepAction.DECREMENT,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT, StepAction.DECREMENT,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT, StepAction.IGNORE,\n    ],\n    \"bd\"\n  ),\n  vacuum: new CardImpl(\n    {\n      title: \"Vacuum\",\n      description: \"Suck up whatever is left.\"\n    },\n    [\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.DECREMENT,\n    ],\n    \"bd\"\n  ),\n  emptyTrash: new CardImpl(\n    {\n      title: \"Empty Trash\",\n      description: \"Those bins were chalk full of [???]! Much better now...\"\n    },\n    [\n      StepAction.IGNORE, StepAction.ZERO, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.ZERO, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.ZERO, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.ZERO, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"bd\"\n  ),\n  feast: new CardImpl(\n    {\n      title: \"Feast\",\n      description: \"What a delicious meal! What are we going to do about all the dishes?\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.INCREMENT, StepAction.IGNORE, StepAction.MAX,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.MAX, StepAction.IGNORE, StepAction.MAX, StepAction.MAX,\n    ],\n    \"ch\"\n  ),\n  rearrange: new CardImpl(\n    {\n      title: \"Rearrange\",\n      description: \"All the chairs and tables have been moved away from their original places!\"\n    },\n    [\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_UP, StepAction.SHIFT_LEFT, StepAction.SHIFT_UP,\n      StepAction.SHIFT_DOWN, StepAction.SHIFT_UP, StepAction.SHIFT_DOWN, StepAction.SHIFT_UP,\n      StepAction.SHIFT_DOWN, StepAction.SHIFT_UP, StepAction.SHIFT_DOWN, StepAction.SHIFT_UP,\n      StepAction.SHIFT_DOWN, StepAction.SHIFT_RIGHT, StepAction.SHIFT_DOWN, StepAction.SHIFT_RIGHT,\n    ],\n    \"ch\"\n\n  ),\n  bus: new CardImpl(\n    {\n      title: \"Bus\",\n      description: \"What a delicious meal! What are we going to do about all the dishes?\"\n    },\n    [\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_LEFT, StepAction.SHIFT_LEFT, StepAction.SHIFT_UP,\n      StepAction.SHIFT_DOWN, StepAction.IGNORE, StepAction.IGNORE, StepAction.SHIFT_UP,\n      StepAction.SHIFT_DOWN, StepAction.IGNORE, StepAction.IGNORE, StepAction.SHIFT_UP,\n      StepAction.SHIFT_DOWN, StepAction.SHIFT_RIGHT, StepAction.SHIFT_RIGHT, StepAction.SHIFT_RIGHT,\n    ],\n    \"ch\"\n  ),\n  rinse: new CardImpl(\n    {\n      title: \"Rinse\",\n      description: \"Rinse the dishes. This will make them easier to clean.\"\n    },\n    [\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_UP, StepAction.SHIFT_LEFT, StepAction.SHIFT_UP,\n      StepAction.SHIFT_DOWN, StepAction.SHIFT_RIGHT, StepAction.SHIFT_DOWN, StepAction.SHIFT_RIGHT,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"ch\"\n  ),\n  scour: new CardImpl(\n    {\n      title: \"Scour\",\n      description: \"Scour the dishes. Really put your back into it.\"\n    },\n    [\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_RIGHT, StepAction.SHIFT_LEFT, StepAction.SHIFT_RIGHT,\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_UP, StepAction.SHIFT_UP, StepAction.SHIFT_RIGHT,\n      StepAction.SHIFT_DOWN, StepAction.SHIFT_RIGHT, StepAction.SHIFT_LEFT, StepAction.SHIFT_DOWN,\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_RIGHT, StepAction.SHIFT_LEFT, StepAction.SHIFT_RIGHT,\n    ],\n    \"ch\"\n  ),\n  dry: new CardImpl(\n    {\n      title: \"Dry\",\n      description: \"Let the dishes dry. What a lovely sight!\"\n    },\n    [\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_RIGHT, StepAction.SHIFT_LEFT, StepAction.SHIFT_RIGHT,\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_RIGHT, StepAction.SHIFT_LEFT, StepAction.SHIFT_RIGHT,\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_RIGHT, StepAction.SHIFT_LEFT, StepAction.SHIFT_RIGHT,\n      StepAction.SHIFT_LEFT, StepAction.SHIFT_RIGHT, StepAction.SHIFT_LEFT, StepAction.SHIFT_RIGHT,\n\n    ],\n    \"ch\"\n  ),\n  laundry: new CardImpl(\n    {\n      title: \"Laundry\",\n      description: \"Do the laundry. You know how!\"\n    },\n    [\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.MAX, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.MAX, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"sd\"\n  ),\n  floor: new CardImpl(\n    {\n      title: \"Floor\",\n      description: \"Clean the floor. You know how!\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.IGNORE, StepAction.IGNORE,\n    ],\n    \"bd\"\n  ),\n  dishes: new CardImpl(\n    {\n      title: \"Dishes\",\n      description: \"Do the dishes. You know how!\"\n    },\n    [\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.MAX, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.MAX, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.MAX, StepAction.IGNORE,\n      StepAction.INCREMENT, StepAction.IGNORE, StepAction.MAX, StepAction.IGNORE,\n    ],\n    \"ch\"\n  )\n};\n\nexport default Cards;","import React, { useState } from 'react';\n\nimport {\n  Paper,\n  Tab,\n  Tabs,\n} from '@material-ui/core';\n\nimport {\n  chunk,\n  take,\n} from 'lodash';\n\nimport {\n  GRID_WIDTH,\n  STEP_COUNT,\n} from '../Constants';\nimport { Part, StepSequence, StepState } from '../Types';\n\nexport function PatternRows(\n  { classSequence, ...remainingProps } : React.HTMLAttributes<HTMLElement> & {\n    classSequence: Array<string>,\n  }\n) {\n  const chunkedGrid: Array<Array<string>> = chunk(classSequence, GRID_WIDTH);\n  return <>\n    {\n    chunkedGrid.map((row: Array<string>, rowId: number) => (\n      <tr key={\"row \" + rowId} className=\"row\">\n      {\n        row.map((cellClass: string, colId: number) => {\n          return (\n            <td key={\"col \" + colId} className={cellClass}>\n              <Paper className=\"step\" variant=\"outlined\"/>\n            </td>\n          );\n        })\n      }\n      </tr>\n    ))\n    }\n  </>;\n};\n\nfunction PartGrid(\n  { parts, currentlyPlayingStep, ...remainingProps }: React.HTMLAttributes<HTMLElement> & {\n    parts: Array<Part>, currentlyPlayingStep: number | null\n  }\n)\n{\n  const [tabIndex, setTabIndex] = useState(0);\n  const {\n    steps,\n    sample,\n  } = parts[tabIndex];\n  const truncatedSteps: StepSequence = take(steps, STEP_COUNT);\n  const cellClasses: Array<string> = truncatedSteps.map((step: StepState, index: number) => {\n    let cellClass = \"cell \";\n    cellClass += StepState[step] as string + \" \";\n    if (currentlyPlayingStep !== null && index === currentlyPlayingStep % STEP_COUNT) {\n      cellClass += \"playing\";\n    }\n    return cellClass;\n  });\n\n  return (\n    <table {...remainingProps} key={tabIndex}>\n      <caption>\n        <Tabs\n          variant=\"fullWidth\"\n          value={tabIndex}\n          onChange={(_, newValue: number) => setTabIndex(newValue)}\n          className=\"part-selector\"\n        >\n          {\n            parts.map((p: Part, index: number) =>\n              <Tab\n                key={\"tab \" + index}\n                label={p.sample}\n                style={{ minWidth: 48 }}\n              />\n            )\n          }\n        </Tabs>\n      </caption>\n      <tbody className={sample}>\n        <PatternRows\n          classSequence={cellClasses}\n        />\n      </tbody>\n    </table>\n  );\n}\n\nexport default function SampleGrid(\n  { parts, currentlyPlayingStep, ...remainingProps }: React.HTMLAttributes<HTMLElement> & {\n    parts: Array<Part>, currentlyPlayingStep: number | null \n  }\n) {\n  return <>\n    <PartGrid\n      parts={parts}\n      currentlyPlayingStep={currentlyPlayingStep}\n      {...remainingProps}\n    />\n  </>\n};","import { Button, Card, CardActions, CardContent } from \"@material-ui/core\";\nimport { range } from \"lodash\";\nimport { ReactElement, useEffect, useState } from \"react\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\nimport Cards from '../Cards';\nimport { MAX_HAND_SIZE } from \"../Constants\";\nimport { CardId, StepAction } from \"../Types\";\nimport { PatternRows } from \"./SampleGrid\";\n\nexport function ActionCard({\n  cardId, cardIndex, buttonLabel, onClickCard, onClickEnabled, viewCard, isSelected\n}: {\n  cardId: CardId, cardIndex: number, buttonLabel: string, onClickCard: any,\n  onClickEnabled: boolean, viewCard: any, isSelected: boolean\n} & React.HTMLAttributes<HTMLDivElement>) : ReactElement\n{\n  const card = Cards[cardId];\n  const maybeClassSequence = card.pattern?.map(\n    (stepAction: StepAction) => \"cell \" + StepAction[stepAction] as string\n  );\n  // TODO: Figure out how to make this nice on touch.\n  return <Card\n    variant=\"outlined\"\n    className={\"card\" + (isSelected ? \" selected\" : \"\")}\n    onClick={viewCard}\n  >\n    <CardContent>\n      <h2>{card.title}</h2>\n      {card.sampleTarget && <span>{card.sampleTarget}</span>}\n      {maybeClassSequence && \n        <table className=\"pattern\">\n          <tbody>\n            <PatternRows\n              classSequence={maybeClassSequence}\n            />\n          </tbody>\n        </table>\n      }\n    </CardContent> \n    <CardActions>\n      {onClickEnabled && \n      <Button\n        variant=\"contained\"\n        onClick={()=>onClickCard(cardIndex)}\n        disabled={!isSelected}\n      >\n        {buttonLabel}\n      </Button>         \n      }\n    </CardActions>\n  </Card>;\n};\n\nexport function EmptyCardSlot(): ReactElement {\n  return <Card variant=\"outlined\" className=\"card empty\">\n    <CardContent>\n      &nbsp;\n    </CardContent> \n  </Card>\n}\n\nconst BASIC_CARD_CLASSES = range(MAX_HAND_SIZE).map((i) => \"card-show\");\n\nexport default function CardSequence({\n  cards, buttonLabel, onClickCard, unremovable, className, ...remainingProps\n}: {\n  cards: Array<CardId>, buttonLabel: string, onClickCard: any, unremovable: number\n} & React.HTMLAttributes<HTMLDivElement>) {\n  const [selectedCard, setSelectedCard] = useState(0);\n  const [cardClasses, setCardClasses] = useState(BASIC_CARD_CLASSES);\n  const [lastCardCount, setLastCardCount] = useState(cards.length);\n  useEffect(() => {\n    if (cards.length !== lastCardCount) {\n      setCardClasses(BASIC_CARD_CLASSES);\n      setSelectedCard(0);\n      setLastCardCount(cards.length);\n      return;\n    }\n    // We need to do a little bit of state machine magic to get the right animations.\n    const newClasses: Array<string> = [...BASIC_CARD_CLASSES]\n    for (let i = 0; i < MAX_HAND_SIZE; i++) {\n      const computeClass: () => string = () => {\n        if (i < selectedCard) {\n          return \"displace\";\n        } else {\n          return \"show\";\n        }\n      }\n      const newClass = computeClass();\n      newClasses[i] = \"card-\" + newClass;\n    }\n    setCardClasses(newClasses);\n  }, [cards, lastCardCount, selectedCard]);\n\n  const clickCard = (index: number) => {\n    if (index >= unremovable) {\n      onClickCard(index);\n    }\n  }\n\n  return <div className={\"sequence \" + className}>\n    <TransitionGroup component={null}>\n    {\n    cards.map((cardId: CardId, index: number) => \n      <CSSTransition key={cardId + \":\" + index} exit={true} classNames=\"card\" timeout={200}>\n        <div className={\"card-slot \" + cardClasses[index]} style={{zIndex: MAX_HAND_SIZE - index}}>\n          <ActionCard\n            cardId={cardId}\n            cardIndex={index}\n            buttonLabel={buttonLabel}\n            onClickCard={() => clickCard(index)}\n            onClickEnabled={index >= unremovable}\n            viewCard={() => {\n              const newCard = index !== selectedCard ? index : (\n                index < cards.length - 1 ? \n                  index + 1 : 0 \n              );\n              setSelectedCard(newCard);\n            }}\n            isSelected={index === selectedCard}\n          />\n        </div>\n      </CSSTransition>\n    )\n    }\n    </TransitionGroup>\n  </div>;\n};","import { Puzzle, StepState } from \"./Types\";\n\nconst LT_PREFIX = process.env.PUBLIC_URL + \"/samples/levels/\";\nconst Puzzles: Array<Puzzle> = [\n  {\n    title: \"Day 2\",\n    description: [\n      \"After the tutorial.\",\n    ],\n    levelTrack: `${LT_PREFIX}unmixed_2_1_112_bpm.ogg`,\n    overrideBPM: 112,\n    targetParts: [\n      {\n        sample: \"bd\",\n        steps: [\n          StepState.ON, StepState.ON, StepState.OFF, StepState.OFF,\n          StepState.OFF, StepState.ON, StepState.OFF, StepState.ON,\n          StepState.OFF, StepState.ON, StepState.OFF, StepState.ON,\n          StepState.OFF, StepState.OFF, StepState.ON, StepState.OFF,\n        ],\n      },\n      {\n        sample: \"sd\",\n        steps: [\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ACCENT, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n        ],\n      },\n      {\n        sample: \"ch\",\n        steps: [\n          StepState.ACCENT, StepState.ACCENT, StepState.ACCENT, StepState.ACCENT,\n          StepState.OFF, StepState.ACCENT, StepState.ON, StepState.ON,\n          StepState.ACCENT, StepState.ON, StepState.ON, StepState.ON,\n          StepState.OFF, StepState.ON, StepState.ACCENT, StepState.ON,\n        ],\n      },\n    ],\n    startingHand: [\n    ],\n    startingSchedule: [\n    ],\n    hints: [\n      \"Things are starting to get hard...\",\n    ],\n  },\n\n  // 0\n  /*\n  {\n    title: \"The Dojo\",\n    description: [\n      \"Hello, Neon...\",\n      \"We have been eagerly awaiting your arrival at the <???> Dojo.\",\n      \"I am <???>, and I have been tasked with guiding you to your living quarters.\",\n      \"Your training shall begin shortly, but why don't you first get settled in?\"\n    ],\n    levelTrack: `${LT_PREFIX}unmixed_1_1_88_bpm.ogg`,\n    targetParts: [\n      {\n        sample: \"ch\",\n        steps: [\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ACCENT, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n        ]\n      }\n    ],\n    startingHand: [\n      \"makeBed\",\n      \"cleanChest\",\n    ],\n    startingSchedule: [],\n  },\n  */\n  {\n    title: \"The Laundry\",\n    description: [\n      \"Hey Neon, are you settled in yet?\",\n      \"I'm [???] and I'm a specialist in [???].\",\n      \"Your training starts today.\"\n    ],\n    levelTrack: `${LT_PREFIX}unmixed_1_1_88_bpm.ogg`,\n    targetParts: [\n      {\n        sample: \"sd\",\n        steps: [\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ACCENT, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ACCENT, StepState.OFF, StepState.OFF, StepState.OFF,\n        ],\n      },\n    ],\n    startingHand: [\n      \"layFlat\",\n      \"fold\",\n      \"putAway\"\n    ],\n    startingSchedule: [],\n    hints: [\n      \"Queue up items on your To-Do list and make a plan for the day!\",\n      \"Why don't we get started by doing the laundry?\",\n      \"Is it just me, or is there something absolutely musical about clean clothes?\"\n    ],\n  },\n  // 1\n  {\n    title: \"The Floor\",\n    description: [\n      \"Nice work on that laundry!\",\n      \"Let me introduce you to [???].\",\n      \"We're only just getting started...\",\n    ],\n    levelTrack: `${LT_PREFIX}unmixed_1_2_88_bpm.ogg`,\n    targetParts: [\n      {\n        sample: \"bd\",\n        steps: [\n          StepState.ACCENT, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ACCENT, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ACCENT, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ACCENT, StepState.OFF, StepState.OFF, StepState.OFF,\n        ],\n      },\n    ],\n    startingHand:  [\n      \"mop\",\n      \"sweep\",\n      \"vacuum\",\n      \"emptyTrash\",\n    ],\n    startingSchedule: [\n      \"drop\",\n    ],\n    hints: [\n      \"Looks like [???] made a real mess of things when [???] dropped those [???].\",\n      \"Not to worry, though! Cleaning is a subtractive process.\",\n      \"Just like with music, sometimes what's missing is heard loudest.\"\n    ],\n  },\n  // 2\n  {\n    title: \"After Dinner\",\n    description: [\n      \"Everything's right back in its place.\",\n      \"You can head to the mess hall now.\",\n      \"[???] will serve you your dinner.\"\n    ],\n    levelTrack: `${LT_PREFIX}unmixed_1_3_88_bpm.ogg`,\n    targetParts: [\n      {\n        sample: \"ch\",\n        steps: [\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n        ],\n      },\n    ],\n    startingHand: [\n      \"rearrange\",\n      \"bus\",\n      \"rinse\",\n      \"scour\",\n      \"dry\",\n    ],\n    startingSchedule: [\n      \"feast\",\n    ],\n    hints: [\n      \"You've been working hard! You've arrived just in time for dinner.\",\n      \"Err.. Or rather, just in time for cleaning the tables and dishes from dinner...\",\n    ],\n  },\n  // 3\n  {\n    title: \"Putting it All Together\",\n    description: [\n      \"Wow, all the tables and dishes look great!\",\n      \"You've worked hard.\",\n      \"It's time to meet the master...\"\n    ],\n    levelTrack: `${LT_PREFIX}unmixed_1_all_88_bpm.ogg`,\n    overrideTrackBars: 12,\n    targetParts: [\n      {\n        sample: \"sd\",\n        steps: [\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ACCENT, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.OFF, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ACCENT, StepState.OFF, StepState.OFF, StepState.OFF,\n        ],\n      },\n      {\n        sample: \"bd\",\n        steps: [\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.OFF, StepState.OFF,\n        ],\n      },\n      {\n        sample: \"ch\",\n        steps: [\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n          StepState.ON, StepState.OFF, StepState.ACCENT, StepState.OFF,\n        ],\n      },\n    ],\n    startingHand: [\n      \"laundry\",\n      \"floor\",\n      \"dishes\",\n    ],\n    startingSchedule: [],\n    hints: [\n      \"Show me what you've done today!\"\n    ]\n  },\n\n];\n\nexport default Puzzles;","import { Modal, Paper } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport Puzzles from \"../Puzzles\";\n\n// Automatically opens when description is updated.\nexport default function TurnDescription({turn, onDismiss} : {turn: number, onDismiss: any}) {\n  const [lastAcknowledgedTurn, setLastAcknowledgedTurn] = useState(turn);\n  const [show, setShow] = useState(true);\n  useEffect(() => {\n    if (turn !== lastAcknowledgedTurn) {\n      setShow(true);\n    }\n  }, [lastAcknowledgedTurn, turn]);\n  const onClose = () => {\n    setShow(false);\n    setLastAcknowledgedTurn(turn);\n    onDismiss();\n  };\n  const puzzle = Puzzles[turn - 1];\n  return <Modal open={show} onClose={onClose} onClick={onClose}>\n    <Paper variant=\"outlined\" className=\"event-modal\">\n      <div className=\"event-body\">\n        <h1>{puzzle.title}</h1>\n        {puzzle.description.map((descriptionLine, i) => <p key={i}>{descriptionLine}</p>)}\n        <p><em>Press Escape or click/tap anywhere to continue...</em></p>\n      </div>\n    </Paper>\n  </Modal>;\n}","import { LinearProgress } from \"@material-ui/core\";\n\nexport default function TrackProgress({progress, max}: {progress: number | null, max: number}) {\n  return <LinearProgress className=\"progress-bar\" variant=\"determinate\" value={\n    100.0 * (progress === null ? 0 : progress + 1) / max\n  }/>;\n}","import {\n  BoardProps \n} from 'boardgame.io/react'\n\nimport {\n  Button,\n  Grid,\n} from '@material-ui/core';\n\nimport CardSequence from './CardSequence';\nimport SampleGrid from './SampleGrid';\nimport { GameState, StepState } from '../Types';\nimport { range } from 'lodash';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { DEFAULT_BPM, DEFAULT_TRACK_BARS, SECONDS_PER_STEP, STEP_COUNT } from '../Constants';\nimport * as Tone from 'tone';\nimport { Time } from 'tone/build/esm/core/type/Units';\nimport LevelDescription from './LevelDescription';\nimport TrackProgress from './TrackProgress';\nimport { Player, Sequence } from 'tone';\nimport { CSSTransition, SwitchTransition } from 'react-transition-group';\nimport Cards from '../Cards';\n\nfunction ContinueButton({G, onClick} : {G: GameState, onClick: any} ) {\n  const enabled = G.hasClearedLevel;\n  return <Button variant=\"contained\" onClick={onClick} disabled={!enabled} className={enabled ? \"glow\" : \"\"}>\n   Continue\n  </Button>;\n}\nconst keyMapper: { [key: string]: string } = {\n  cy: \"f4\",\n  bd: \"e4\",\n  ch: \"d4\",\n  sd: \"c4\",\n};\n\nconst sampler = new Tone.Sampler({\n  urls: {\n    // Cymbal\n    f4: \"CY/E808_CY-12.wav\",\n    // Bass Drum\n    e4: \"BD/E808_BD[short]-03.wav\",\n    // Closed Hat\n    d4: \"CH/E808_CH-06.wav\",\n    // Snare\n    c4: \"SD/E808_SD-15.wav\",\n  },\n  baseUrl: process.env.PUBLIC_URL + \"/samples/808/\"\n}).toDestination();\n\nexport default function Board({\n  G, ctx, moves  \n} : React.HTMLAttributes<HTMLElement> & BoardProps<GameState>)\n{\n  const {\n    title,\n    hints,\n    levelTrack,\n    playerParts,\n    targetParts,\n    playerHand,\n    playerSchedule,\n    overrideTrackBars,\n    overrideBPM,\n  } = G;\n  const trackBars = overrideTrackBars ?? DEFAULT_TRACK_BARS;\n  const bpm = overrideBPM ?? DEFAULT_BPM;\n  useEffect(() => {\n    Tone.Transport.bpm.value = bpm;\n    Tone.start();\n    Tone.Transport.start();\n    return () => {\n      Tone.Transport.stop();\n    }\n  }, [bpm]);\n  const [npcDialog, setNpcDialog] = useState(hints);\n  useEffect(() => {\n    setNpcDialog(hints);\n  }, [hints]);\n  const [currentlyPlayingStep, setCurrentlyPlayingStep] = useState<number | null>(null);\n  const [lastPlayedStep, setLastPlayedStep] = useState<number | null>(null);\n  const [currentTime, setCurrentTime] = useState<Time | undefined>(undefined);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [playerActive, setPlayerActive] = useState(true);\n  const [player, setPlayer] = useState<Player | null>(null);\n  const [sequence, setSequence] = useState<Sequence | null>(null);\n  const onStep = (time: Time, stepId: number) => {\n    // This is a bit subtle: time has to be set before step.\n    // Only step triggers the sample side effect.\n    setCurrentTime(time);\n    setCurrentlyPlayingStep(stepId);\n  };\n  const play = () => {\n    if (isPlaying) {\n      return;\n    }\n    const sequencer = new Tone.Sequence(\n      onStep,\n      range(STEP_COUNT * trackBars),\n      \"16n\"\n    );\n    // Just to prevent overlap.\n    stop();\n    setSequence(sequencer);\n    const player = new Tone.Player(\n      levelTrack,\n      () => {\n        setIsPlaying(true);\n        Tone.start();\n        sequencer.loop = false;\n        sequencer.start();\n      }\n    ).toDestination();\n    setPlayer(player);\n    player.loop = false;\n    player.autostart = true;\n  };\n  const stop = useCallback(() => {\n    if (!isPlaying) {\n      return;\n    }\n    setCurrentTime(undefined);\n    setLastPlayedStep(null);\n    setCurrentlyPlayingStep(null);\n    sequence?.stop();\n    setSequence(null);\n    player?.stop();\n    setPlayer(null);\n    setIsPlaying(false);\n    setPlayerActive(true);\n  }, [isPlaying, sequence, player]);\n  useEffect(() => {\n    if (lastPlayedStep === currentlyPlayingStep) {\n      return;\n    }\n    if(typeof currentTime === 'undefined') {\n      return;\n    }\n    if (currentlyPlayingStep === null) {\n      return;\n    }\n    if (!isPlaying) {\n      return;\n    }\n    setLastPlayedStep(currentlyPlayingStep);\n    // stepIndex selects from our step sequencer, which is only 16th notes on repeat.\n    const stepIndex = currentlyPlayingStep % STEP_COUNT;\n    const parts = playerActive ? playerParts : targetParts;\n    for (let part of parts) {\n      if (part.steps[stepIndex] !== StepState.OFF) {\n        sampler.triggerAttackRelease(keyMapper[part.sample], \"16n\", currentTime, part.steps[stepIndex] / 2);\n      }\n    }\n    if (currentlyPlayingStep >= (STEP_COUNT * trackBars) - 1) {\n      stop();\n      return;\n    }\n  }, [currentTime, playerParts, targetParts, currentlyPlayingStep, lastPlayedStep, playerActive, isPlaying, stop, trackBars])\n  const onViewCard = (i: number) => {\n    const selectedCard = Cards[playerHand[i]];\n    if (selectedCard) {\n      setNpcDialog([selectedCard.description]);\n    }\n  };\n  return <Grid container className=\"game-board\" alignItems=\"center\" justify=\"center\">\n    <LevelDescription\n      turn={ctx.turn}\n      onDismiss={() => {\n        // On a new level, play the target first.\n        setPlayerActive(false);\n        play();\n      }}\n    />\n    <Grid item xs={3} className=\"pc-area portrait-area\" key=\"pc-area\">\n      <div className=\"pc portrait\">&nbsp;</div>\n    </Grid>\n    <Grid item xs={6} className=\"parts-area\">\n      <Grid container className=\"parts\" justify=\"center\" key=\"parts\">\n        <Grid item xs={12} key=\"title\">\n          <h1>{ctx.turn}: {title}</h1>\n        </Grid>\n        <Grid item xs={1} key=\"time-elapsed\">\n          {isPlaying && \n            <span>\n              {((currentlyPlayingStep ?? 0)  * SECONDS_PER_STEP).toFixed(1)}\n            </span>\n          }\n        </Grid>\n        <Grid item xs={10} key=\"progress\">\n          <TrackProgress progress={currentlyPlayingStep} max={trackBars * STEP_COUNT} />\n        </Grid>\n        <Grid item xs={1} key=\"time-remaining\">\n          {isPlaying && \n            <span>\n              {(((trackBars * STEP_COUNT) - (currentlyPlayingStep ?? 0))  * SECONDS_PER_STEP).toFixed(1)}\n            </span>\n          }\n        </Grid>\n        <Grid item xs={12} className=\"start-stop\" key=\"start-stop\">\n          <Button\n            className={isPlaying ? \"stop\" : \"play\"}\n            onClick={isPlaying ? stop : play}\n          >\n            &nbsp;\n          </Button>\n        </Grid>\n        <Grid item xs={12} className=\"current-parts\">\n          <SwitchTransition>\n            <CSSTransition\n              key={playerActive ? \"current\": \"target\"}\n              timeout={200}\n              classNames={playerActive ? \"current\": \"target\"}\n            >\n            { playerActive ? \n              <SampleGrid\n                parts={playerParts}\n                currentlyPlayingStep={playerActive ? currentlyPlayingStep : null}\n                className=\"sampler current\"\n              />\n              :\n              <SampleGrid\n                parts={targetParts}\n                currentlyPlayingStep={!playerActive ? currentlyPlayingStep : null}\n                className=\"sampler target\"\n              />\n            }\n            </CSSTransition>\n          </SwitchTransition>\n          <Button\n            variant=\"contained\"\n            disabled={playerActive}\n            className={playerActive ? \"selected\" : \"\"}\n            onClick={() => {\n              setPlayerActive(true);\n              play();\n            }}\n          >\n            My Parts\n          </Button>\n          &nbsp;\n          <Button\n            variant=\"contained\"\n            disabled={!playerActive}\n            className={!playerActive ? \"selected\" : \"\"}\n            onClick={() => {\n              setPlayerActive(false);\n              play();\n            }}\n          >\n            Goal \n          </Button>\n        </Grid>\n        <Grid item xs={12} className=\"dialogue\">\n          { typeof(npcDialog) !== 'undefined' && \n            npcDialog.map((line, i) => <p key={i}>{line}</p>)\n          }\n        </Grid>\n      </Grid>\n    </Grid>\n    <Grid item xs={3} className=\"npc-area portrait-area\" key=\"npc-area\">\n      <div className=\"npc portrait\">&nbsp;</div>\n    </Grid>\n    <Grid item xs={12} key=\"break\"/>\n    <Grid item xs={5} className=\"hand-area\" key=\"hand-area\">\n      <h3>To-Do</h3>\n      <CardSequence\n        cards={playerHand}\n        onClickCard={(i: number) => {\n          moves.playCard(i);\n          setPlayerActive(true);\n          play();\n          onViewCard(i);\n        }}\n        buttonLabel=\"Enqueue\"\n        className=\"hand\"\n        unremovable={0}\n      />\n    </Grid>\n    <Grid item xs={2} className=\"next-day\" key=\"next-day\">\n      <Button variant=\"contained\" onClick={moves.clearSchedule}>Reset</Button>\n      <hr/>\n      <ContinueButton G={G} onClick={\n        () => {\n          moves.commitSchedule();\n          stop();\n        }\n      }/>\n    </Grid>\n    <Grid item xs={5} className=\"schedule-area\" key=\"schedule-area\">\n      <h3>Schedule</h3>\n      <CardSequence\n        cards={playerSchedule}\n        onClickCard={(i: number) => {\n          moves.removeCard(i);\n          play();\n        }}\n        buttonLabel=\"Remove\"\n        className=\"schedule\"\n        unremovable={G.startingSchedule.length}\n      />\n    </Grid>\n  </Grid>;\n}","import { Ctx, Game } from 'boardgame.io';\n\nimport Puzzles from './Puzzles';\nimport Cards from './Cards';\n\nimport { STEP_COUNT } from './Constants';\nimport { GameState, Part, StepSequence, StepState } from './Types';\nimport { INVALID_MOVE } from 'boardgame.io/core';\n\n\nexport const FLIP:string = \"flip\";\n\nconst EmptyPart: () => StepSequence = () => Array.from({length: STEP_COUNT}, () => StepState.OFF);\n\nconst SetupTurn = (turn: number, oldG?: GameState) => {\n  const puzzle = Puzzles[turn - 1];\n  const playerParts: Array<Part> = puzzle.targetParts.map(\n    (part: Part) => ({\n      sample: part.sample,\n      steps: EmptyPart()\n    })\n  );\n  const newG = {\n    // Immutable stuff.\n    ...puzzle,\n    // Changing stuff.\n    playerParts,\n    playerHand: [...puzzle.startingHand],\n    playerSchedule: [...(puzzle.startingSchedule ?? [])],\n    hasClearedLevel: oldG?.hasClearedLevel ?? false,\n  };\n  // Apply any fixed cards.\n  (puzzle.startingSchedule ?? []).forEach((cardId) => Cards[cardId].playCard(newG))\n  return newG;\n}\n\nexport const CheckLevelComplete: (G: GameState) => boolean = (G: GameState) => {\n  for (const [targetPartIndex, targetPart] of G.targetParts.entries()) {\n    const currentPart = G.playerParts[targetPartIndex];\n    for (let i: number = 0; i < STEP_COUNT; i++) {\n      if (currentPart.steps[i] !== targetPart.steps[i]) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nexport const MyGame: Game = {\n  moves: {\n    playCard: (G: GameState, ctx: Ctx, handSlot: number) => {\n      const cardId = G.playerHand[handSlot];\n      const card = Cards[cardId];\n      if (!card) {\n        return INVALID_MOVE;\n      }\n      card.playCard(G); \n      // Remove the played card.\n      G.playerHand.splice(handSlot, 1);\n      // Add it to the play stack.\n      G.playerSchedule.push(cardId);\n      if (CheckLevelComplete(G)) {\n        G.hasClearedLevel = true;\n      }\n    },\n    removeCard: (G: GameState, ctx: Ctx, playerScheduleSlot: number) => {\n      if (playerScheduleSlot < G.startingSchedule.length) {\n        return INVALID_MOVE;\n      }\n\n      const removedCardId = G.playerSchedule[playerScheduleSlot];\n      if (!removedCardId) {\n        return INVALID_MOVE;\n      }\n\n      // Reset the turn and re-apply the cards in sequence. \n      const cleanState: GameState = SetupTurn(ctx.turn, G);\n      \n      // Add the removed card back to the hand.\n      cleanState.playerHand = [...G.playerHand];\n      cleanState.playerHand.push(removedCardId);\n\n      // Re-play the remaining cards.\n      for (const [replayedCardIndex, replayedCardId] of G.playerSchedule.entries()) {\n        if (replayedCardIndex === playerScheduleSlot || replayedCardIndex < G.startingSchedule.length) {\n          // Ignore this removed card.\n          continue;\n        }\n        const replayedCard = Cards[replayedCardId];\n        replayedCard.playCard(cleanState);\n        cleanState.playerSchedule.push(replayedCardId);\n      }\n      if (CheckLevelComplete(cleanState)) {\n        G.hasClearedLevel = true;\n      }\n      return cleanState;\n    },\n    clearSchedule: (G: GameState, ctx: Ctx) => {\n      if (CheckLevelComplete(G)) {\n        G.hasClearedLevel = true;\n      }\n      return SetupTurn(ctx.turn, G);\n    },\n    commitSchedule: (G: GameState, ctx: Ctx) => {\n      if (G.hasClearedLevel) {\n        ctx.events?.endTurn?.();\n      }\n    },\n  },\n  turn: {\n    onBegin: (G: GameState, ctx: Ctx) => SetupTurn(ctx.turn)\n  }\n};","import './App.css';\nimport { Client } from 'boardgame.io/react';\nimport Board from './component/Board';\nimport { MyGame } from './Game';\n\nconst App = Client({ game: MyGame, board: Board, numPlayers: 1, debug: true });\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}